{"version":3,"sources":["i1-main/m1-ui/u4-components/co2-Error404/Error404.module.css","i2-features/f1-Auth/f1-Login/Login.module.css","i2-features/f1-Auth/f3-Registration/Registration.module.css","i2-features/f1-Auth/f2-Recovery/Recovery.module.css","i2-features/f1-Auth/f2-Recovery/CreateNewPassword.module.css","i1-main/m1-ui/u1-common/c1-assets/images/girl-dancer.gif","i1-main/m1-ui/u4-components/co2-Error404/Error404.tsx","i1-main/m3-dal/api.ts","i1-main/m2-bll/profile-reducer.ts","i1-main/m2-bll/auth-reducer.ts","i2-features/f1-Auth/f1-Login/Login.tsx","i1-main/m2-bll/registration-reducer.ts","i2-features/f1-Auth/f3-Registration/Registration.tsx","i1-main/m1-ui/u4-components/co1-Profile/Profile.tsx","i1-main/m2-bll/recovery-reducer.ts","i2-features/f1-Auth/f2-Recovery/Recovery.tsx","i2-features/f1-Auth/f2-Recovery/CreateNewPassword.tsx","i2-features/f1-Auth/f1-Login/Logout.tsx","i2-features/f2-Table/t2-Cards/cards-reducer.ts","i2-features/f2-Table/t2-Cards/Cards.tsx","i2-features/f2-Table/t1-Packs/packs-reducer.ts","i2-features/f2-Table/t1-Packs/Packs.tsx","i2-features/f2-Table/t3-Learn/learn-reducer.ts","i2-features/f2-Table/t3-Learn/Learn.tsx","i1-main/m1-ui/u1-redirect/RedirectComponent.tsx","i1-main/m1-ui/u3-routes/Routes.tsx","i1-main/m1-ui/u2-header/Header.tsx","i1-main/m1-ui/App.tsx","reportWebVitals.ts","i1-main/m2-bll/store.ts","index.tsx","i1-main/m1-ui/u2-header/Header.module.css","i2-features/f2-Table/t3-Learn/Learn.module.css"],"names":["module","exports","Error404","className","s","error404","error404_text","girl","src","alt","instance","axios","create","baseURL","withCredentials","authAPI","data","post","delete","cardsAPI","get","cardsPack","id","put","card","initialState","_id","email","name","publicCardPacksCount","created","Date","updated","isAdmin","verified","rememberMe","profileAC","avatar","error","type","profileChanged","login","password","isLoggedIn","emailChanged","passwordChanged","rememberMeChanged","onSubmit","onError","onLogout","onSubmitAC","value","onErrorAC","Login","dispatch","useDispatch","useSelector","to","PATH","PROFILE","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","passwordChangedAC","rememberMeChangedAC","then","res","catch","err","response","message","Item","label","rules","required","Password","offset","valuePropName","htmlType","CHANGE_EMAIL","CHANGE_PASSWORD","IS_REGISTRATION","isRegistered","createUserTC","dataRegistration","Registration","state","LOGIN","registration","Profile","profile","useState","isDone","recoveryInfo","setNewPasswordInfo","isNewPasswordSet","SUCCESSFUL","RESPONSE_RECOVERY_INFO","RESPONSE_SET_NEW_PASSWORD_INFO","SET_NEW_PASSWORD","successful","recoveryPassword","info","success","setNewPasswordTC","Recovery","recovery","CREATE_NEW_PASSWORD","from","CreateNewPassword","resetPasswordToken","useParams","console","log","createNewPassword","Logout","useEffect","cards","cardsTotalCount","maxGrade","Infinity","minGrade","page","pageCount","packUserId","cardsPack_id","isLoading","getCards","cardsLoaderIsOn","cardsLoaderAC","getCardsTC","cardsAC","finally","Cards","isModalVisible","setIsModalVisible","question","setQuestion","answer","setAnswer","PACKS","columns","title","dataIndex","key","width","render","text","sorter","compare","a","b","grade","multiple","size","_","record","onConfirm","handleDelete","packId","toString","deletedCard","deleteCardTC","map","pack","lastUpdate","substr","replace","spinning","onClick","visible","onOk","newCard","addCardTC","onCancel","onChange","event","currentTarget","dataSource","pagination","position","defaultPageSize","pageSizeOptions","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","getCardPacks","packsLoaderIsOn","currentPackIdAC","packsLoaderAC","getPacksTC","Packs","packName","setPackName","first","setFirst","updateModalVisible","setUpdateModalVisible","updatePackName","setUpdatePackName","packs","currentId","CARDS","creator","cardsCount","LEARN","rel","deletedCardsPack","user_name","newCardsPack","addPackTC","updatedCardsPack","updatePack","onRow","card_id","more_id","shots","user_id","__v","updatedCard","cardsEvaluation","updateCardAC","messages","getCard","sum","reduce","acc","rand","Math","random","i","newSum","Learn","store","check","setCheck","isDisable","setIsDisable","isDisabledButton","setIsDisabledButton","rating","setCard","myCallBack","useCallback","checkButton","length","layout","content","disabled","buttons","button","nextButton","AuthRedirectPage","React","memo","children","restProps","user","firstRendering","setFirstRendering","redirect","setRedirect","spin","setSpin","setTimeout","REGISTRATION","RECOVERY","LOGOUT","Routes","path","exact","Header","background","nav_links","nav_container","title_nav","activeClassName","active","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","learn","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad8a79cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error404\":\"Error404_error404__1ry36\",\"error404_text\":\"Error404_error404_text__2VILg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2iPmy\",\"loginForm\":\"Login_loginForm__AYLAX\",\"title\":\"Login_title__Nx4Wo\",\"message\":\"Login_message__3XIc9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registration\":\"Registration_registration__Gz9l-\",\"registrationInner\":\"Registration_registrationInner__1ikOA\",\"title\":\"Registration_title__3nqo_\",\"message\":\"Registration_message__3rORD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recovery\":\"Recovery_recovery__7ban8\",\"title\":\"Recovery_title__3U_nk\",\"button\":\"Recovery_button__3WSC1\",\"message\":\"Recovery_message__10zGr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createNewPassword\":\"CreateNewPassword_createNewPassword__14jYR\",\"button\":\"CreateNewPassword_button__1zOYG\"};","export default __webpack_public_path__ + \"static/media/girl-dancer.cfef6556.gif\";","import React from \"react\";\r\nimport s from './Error404.module.css'\r\nimport girl from '../../u1-common/c1-assets/images/girl-dancer.gif'\r\n\r\nfunction Error404() {\r\n    return (\r\n        <div className={s.error404}>\r\n            <div className={s.error404_text}>404\r\n            Page not found!</div><br/>\r\n            <div className={s.girl}><img src={girl} alt=\"\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error404;\r\n","import axios from \"axios\";\r\nimport {AxiosResponseType, LoginType} from \"../m2-bll/auth-reducer\";\r\n\r\n\r\n//'https://neko-back.herokuapp.com/2.0/'\r\n//\"http://localhost:7542/2.0/\"\r\n\r\n// 'valentyn.333k@gmail.com'\r\n// '111qwe222'\r\nconst instance  = axios.create ({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true,\r\n})\r\n\r\nexport type RequestRecoveryType = {\r\n    email: string,\r\n    from?: string,\r\n    message?: string\r\n}\r\n\r\ntype RecoveryResponseType = {\r\n    info: any\r\n    status: number\r\n    statusText: string\r\n    error?: string\r\n}\r\nexport type RequestType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\nexport type ResponseType = {\r\n    data: any\r\n    status: number\r\n    statusText: string\r\n    error?: string\r\n}\r\nexport type SetNewPasswordRequestType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\nexport type SetNewPasswordResponseType = {\r\n    info: string\r\n    error: string;\r\n}\r\n\r\nexport type CardPacksType = {\r\n    _id: string,\r\n    user_id: string,\r\n    user_name: string,\r\n    private: boolean,\r\n    name: string,\r\n    path: string,\r\n    grade: number,\r\n    shots: number,\r\n    cardsCount: number,\r\n    type: string,\r\n    rating: number,\r\n    created: string,\r\n    updated: string,\r\n    more_id: string,\r\n    __v: number\r\n}\r\n\r\nexport type PacksResponseType = {\r\n    cardPacks: Array<CardPacksType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n// export type PaginationType = {\r\n//     cardPacksTotalCount: number\r\n//     maxCardsCount: number\r\n//     minCardsCount: number\r\n//     page: number\r\n//     pageCount: number\r\n//     token: string\r\n// }\r\n\r\nexport type RequestPackType = {\r\n    name?: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    deckCover?: string\r\n    private?: boolean\r\n    type?: string\r\n}\r\n\r\nexport type RespondCardsType = {\r\n    cards: Array<RespondCardType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n    more_id: string\r\n\r\n}\r\n\r\nexport type RespondCardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n    more_id: string\r\n}\r\n\r\nexport type UpdatedRespondCardType = {\r\n    answer: string\r\n    answerImg: string\r\n    answerVideo: string\r\n    cardsPack_id: string\r\n    comments: string\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    question: string\r\n    questionImg: string\r\n    questionVideo: string\r\n    rating: number\r\n    shots: number\r\n    type: \"card\"\r\n    updated: string\r\n    user_id: string\r\n    __v: number\r\n    _id: string\r\n}\r\nexport type UpdatedRespondDataCardType = {\r\n    token: string\r\n    tokenDeathTime: number\r\n    updatedCard: UpdatedRespondCardType\r\n}\r\n\r\nexport type RequestCardType = {\r\n    cardsPack_id: string\r\n}\r\nexport type NewCardType = {\r\n    answer: string\r\n    cardsPack_id: string\r\n    comments: string\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    question: string\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    __v: number\r\n    _id: string\r\n}\r\nexport type OnCardAddType = {\r\n    newCard: NewCardType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type ThunkLearnPutType = {\r\n    grade: number,\r\n    card_id: string\r\n}\r\n\r\nexport type LearnCardType = {\r\n    card_id: string\r\n    cardsPack_id: string\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    shots: number\r\n    updated: string\r\n    user_id: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport const authAPI = {\r\n    recoverPassword(data: RequestRecoveryType) {\r\n        return  instance.post<RecoveryResponseType>('auth/forgot', data)\r\n    },\r\n    login(data: LoginType) {\r\n        return instance.post<AxiosResponseType>('auth/login', data)\r\n    },\r\n    setNewPassword(data: SetNewPasswordRequestType) {\r\n        return instance.post<SetNewPasswordResponseType>('auth/set-new-password', data)\r\n    },\r\n    signUp(data: RequestType) {\r\n        return instance.post<ResponseType>('auth/register', data)\r\n    },\r\n    authMe() {\r\n      return instance.post(`/auth/me`, {})\r\n    },\r\n    ping() {\r\n        return instance.get('ping')\r\n    },\r\n    logout() {\r\n        return instance.delete(`/auth/me`, {})\r\n    }\r\n}\r\n\r\nexport const cardsAPI = {\r\n    packs() {\r\n        return instance.get(`cards/pack?pageCount=100`)\r\n        //?packName=english // не обязательно\r\n        // &min=3 // не обязательно\r\n        // &max=9 // не обязательно\r\n        // &sortPacks=0updated // не обязательно\r\n        // &page=1 // не обязательно\r\n        // &pageCount=4 // не обязательно\r\n    },\r\n    packsAdd(data: RequestPackType) {\r\n        return instance.post(`cards/pack`, {cardsPack: data})\r\n    },\r\n    packDelete(id?: string) {\r\n        return instance.delete(`cards/pack?id=${id}`)\r\n    },\r\n    packUpdate(data: {_id: string, name?: string}) {\r\n        return instance.put(`cards/pack`, {cardsPack: data})\r\n    },\r\n\r\n    cards(data: string) {\r\n        return instance.get(`cards/card/?cardsPack_id=${data}&pageCount=20`)\r\n    },\r\n    cardAdd(data: {}) {\r\n        return instance.post(`cards/card/`, {card: data})\r\n    },\r\n    cardDelete(data: string) {\r\n        return instance.delete(`cards/card?id=${data}`)\r\n    },\r\n    evaluationCard(data: {}) {\r\n        return instance.put('cards/grade', data)\r\n    }\r\n}","import {AxiosResponseType} from \"./auth-reducer\";\r\n\r\nconst initialState: AxiosResponseType = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    publicCardPacksCount: 0,\r\n    created: new Date(),\r\n    updated: new Date(),\r\n    isAdmin: false,\r\n    verified: false,\r\n    rememberMe: false,\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\ntype PROFILE = ReturnType<typeof profileAC>\r\n\r\n\r\ntype ActionsType = PROFILE\r\n\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case profileChanged:\r\n            return {\r\n                ...state,\r\n                _id: action._id,\r\n                email: action.email,\r\n                name: action.name,\r\n                publicCardPacksCount: action.publicCardPacksCount,\r\n                created: action.created,\r\n                updated: action.updated,\r\n                isAdmin: action.isAdmin,\r\n                verified: action.verified,\r\n                rememberMe: action.rememberMe,\r\n                avatar: action.avatar,\r\n                error: action.error,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const profileAC = (\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    publicCardPacksCount: number, // количество колод\r\n    created: Date,\r\n    updated: Date,\r\n    isAdmin: boolean,\r\n    verified: boolean, // подтвердил ли почту\r\n    rememberMe: boolean,\r\n    avatar: string | undefined,\r\n    error: string | undefined,\r\n) => ({type: profileChanged, _id, email, name, avatar, publicCardPacksCount, created,\r\n    updated, isAdmin, verified, rememberMe, error} as const)\r\n\r\n\r\nconst profileChanged = 'profileChanged'\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../m3-dal/api\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {profileAC} from \"./profile-reducer\";\r\nimport {message} from \"antd\";\r\n\r\n\r\ntype EMAIL_CHANGED = ReturnType<typeof emailChangedAC>\r\ntype PASSWORD_CHANGED = ReturnType<typeof passwordChangedAC>\r\ntype ON_SUBMIT = ReturnType<typeof onSubmitAC>\r\ntype REMEMBER_ME = ReturnType<typeof rememberMeChangedAC>\r\nexport type ON_ERROR = ReturnType<typeof onErrorAC>\r\nexport type ON_LOGOUT = ReturnType<typeof onLogoutAC>\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\n\r\nexport type LoginType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n}\r\n\r\nexport type AxiosResponseType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n\r\n    error?: string;\r\n}\r\n\r\nconst initialState = {\r\n    login: '',\r\n    password: '',\r\n    rememberMe: false,\r\n    isLoggedIn: false,\r\n    error: '',\r\n}\r\n\r\n\r\ntype ActionsType = EMAIL_CHANGED | PASSWORD_CHANGED | ON_SUBMIT | REMEMBER_ME | ON_ERROR\r\n | ON_LOGOUT\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case emailChanged:\r\n            return {...state, login: action.value}\r\n        case passwordChanged:\r\n            return {...state, password: action.value}\r\n        case rememberMeChanged:\r\n            return {...state, rememberMe: action.value}\r\n        case onSubmit:\r\n            return {...state, isLoggedIn: action.value}\r\n        case onLogout:\r\n            return {...state, isLoggedIn: action.value}\r\n        case onError:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst emailChanged = 'emailChanged'\r\nconst passwordChanged = 'passwordChanged'\r\nconst rememberMeChanged = 'rememberMeChanged'\r\nconst onSubmit = 'onSubmit'\r\nexport const onError = 'onError'\r\nexport const onLogout = 'onLogout'\r\n\r\nexport const emailChangedAC = (value: string) => ({type: emailChanged, value} as const)\r\nexport const passwordChangedAC = (value: string) => ({type: passwordChanged, value} as const)\r\nexport const rememberMeChangedAC = (value: boolean) => ({type: rememberMeChanged, value} as const)\r\nexport const onSubmitAC = () => ({type: onSubmit, value: true} as const)\r\nexport const onLogoutAC = () => ({type: onLogout, value: false} as const)\r\nexport const onErrorAC  = (error: string) => ({type: onError, error} as const)\r\n\r\nexport const onSubmitTC = (data: LoginType) => (dispatch: Dispatch) => {\r\n    authAPI.login(data)\r\n        .then((res: AxiosResponse<AxiosResponseType>) => {\r\n            dispatch(onSubmitAC())\r\n            dispatch(profileAC(res.data._id, res.data.email, res.data.name, res.data.publicCardPacksCount, res.data.created,\r\n                res.data.updated, res.data.isAdmin, res.data.verified, res.data.rememberMe, res.data.avatar, res.data.error))\r\n        })\r\n\r\n        .catch((err) => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\n\r\nexport const authMe = () => (dispatch: Dispatch) => {\r\n    authAPI.authMe()\r\n        .then( (res) => {\r\n            dispatch(onSubmitAC())\r\n            dispatch(profileAC(res.data._id, res.data.email, res.data.name, res.data.publicCardPacksCount, res.data.created,\r\n                res.data.updated, res.data.isAdmin, res.data.verified, res.data.rememberMe, res.data.avatar, res.data.error))\r\n        })\r\n        .catch((err) => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    authAPI.logout()\r\n        .then( () => {\r\n            message.info(`You've been logged out`)\r\n        })\r\n        .catch((err) => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\n\r\n\r\n\r\n","import React, {FC} from \"react\";\r\nimport s from \"./Login.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {\r\n    emailChangedAC,\r\n    InitialStateType,\r\n    onSubmitTC,\r\n    passwordChangedAC,\r\n    rememberMeChangedAC\r\n} from \"../../../i1-main/m2-bll/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {Form, Input, Button, Checkbox, message} from 'antd';\r\n\r\n\r\nexport const Login: FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const state = useSelector<AppRootStateType, InitialStateType>(s => s.isLoggedIn)\r\n\r\n\r\n    type ValuesType= {\r\n        password: string\r\n        email: string\r\n        rememberMe: boolean\r\n    }\r\n\r\n    const onFinish = (values: ValuesType) => {\r\n        dispatch(emailChangedAC(values.email))\r\n        dispatch(passwordChangedAC(values.password))\r\n        dispatch(rememberMeChangedAC(values.rememberMe))\r\n        dispatch(onSubmitTC({email: values.email, password: values.password, rememberMe: values.rememberMe}))\r\n    };\r\n\r\n    if (state.isLoggedIn) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.login}>\r\n            <Form\r\n                { ...{labelCol: { span: 8 }, wrapperCol: { span: 16 } }}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    rules={[{ required: true, message: 'Please input your email!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[{ required: true, message: 'Please input your password!' }]}\r\n                >\r\n                    <Input.Password />\r\n                </Form.Item>\r\n\r\n                <Form.Item { ...{wrapperCol: { offset: 8, span: 16 }}} name=\"rememberMe\" valuePropName=\"checked\">\r\n                    <Checkbox>Remember me</Checkbox>\r\n                </Form.Item>\r\n\r\n                <Form.Item {...{wrapperCol: { offset: 8, span: 16 }}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, RequestType} from \"../m3-dal/api\";\r\nimport {ON_ERROR, onError, onErrorAC} from \"./auth-reducer\";\r\nimport {message} from \"antd\";\r\n\r\nconst CHANGE_EMAIL = 'CHANGE_EMAIL',\r\n    CHANGE_PASSWORD = 'CHANGE_PASSWORD',\r\n    IS_REGISTRATION = 'IS_REGISTRATION'\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n    email: '',\r\n    password: '',\r\n    error: ''\r\n}\r\nexport type InitialStateRegistrationType = typeof initialState\r\n\r\ntype ChangeEmailAT = ReturnType<typeof changeEmail>\r\ntype ChangePasswordAT = ReturnType<typeof changePassword>\r\ntype CheckRegistrationAT = ReturnType<typeof checkRegistration>\r\n\r\n\r\ntype ActionType =\r\n    | ChangeEmailAT\r\n    | ChangePasswordAT\r\n    | CheckRegistrationAT\r\n    | ON_ERROR\r\n\r\n\r\nexport const registrationReducer = (state: InitialStateRegistrationType = initialState, action: ActionType): InitialStateRegistrationType => {\r\n    switch (action.type) {\r\n        case CHANGE_EMAIL:\r\n            return {...state, email: action.value}\r\n        case CHANGE_PASSWORD:\r\n            return {...state, password: action.value}\r\n        case IS_REGISTRATION:\r\n            return {...state, isRegistered: action.isRegistered}\r\n        case onError:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//ac\r\nexport const changeEmail = (value: string) => ({type: CHANGE_EMAIL, value} as const)\r\nexport const changePassword = (value: string) => ({type: CHANGE_PASSWORD, value} as const)\r\nconst checkRegistration = (isRegistered: boolean) => ({type: IS_REGISTRATION, isRegistered} as const)\r\n\r\n//tc\r\nexport const createUserTC = (dataRegistration: RequestType) => (dispatch: Dispatch) => {\r\n    authAPI.signUp({email: dataRegistration.email, password: dataRegistration.password})\r\n        .then((res) => {\r\n            dispatch(checkRegistration(true))\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./Registration.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {createUserTC, InitialStateRegistrationType} from \"../../../i1-main/m2-bll/registration-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {Button, Form, Input} from \"antd\";\r\n\r\n\r\nexport const Registration = () => {\r\n    const state = useSelector<AppRootStateType, InitialStateRegistrationType>(state=>state.isRegistered)\r\n    const  dispatch = useDispatch()\r\n\r\n    type ValuesType= {\r\n        password: string\r\n        email: string\r\n    }\r\n    const onFinish = (values: ValuesType) => {\r\n        dispatch(createUserTC({email: values.email, password: values.password}))\r\n    };\r\n    if (state.isRegistered) {\r\n       return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n    return (\r\n        <div className={s.registration}>\r\n            <Form\r\n                { ...{labelCol: { span: 8 }, wrapperCol: { span: 16 } }}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    rules={[{ required: true, message: 'Please input your email!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[{ required: true, message: 'Please input your password!' }]}\r\n                >\r\n                    <Input.Password />\r\n                </Form.Item>\r\n                <Form.Item {...{wrapperCol: { offset: 8, span: 16 }}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport s from \"./Profile.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../u3-routes/Routes\";\r\nimport {authMe} from \"../../../m2-bll/auth-reducer\";\r\n\r\n\r\nexport const Profile = () => {\r\n\r\n    const name = useSelector<AppRootStateType, string>(s => s.profile.name)\r\n    const avatar = useSelector<AppRootStateType, string | undefined>(s => s.profile.avatar)\r\n    const publicCardPacksCount = useSelector<AppRootStateType, number>(s => s.profile.publicCardPacksCount)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const [first, setFirst] = useState<boolean>(true);\r\n\r\n    // useEffect(() => {\r\n    //     if (first) {\r\n    //         dispatch(authMe())\r\n    //         setFirst(false);\r\n    //     }\r\n    // }, [first, dispatch])\r\n    //\r\n    // if (!isLoggedIn) {\r\n    //     return <Redirect to={PATH.LOGIN}/>\r\n    // }\r\n    return (\r\n        <div className={s.profile}>\r\n            <div>{`your name is ${name}`}</div>\r\n            {avatar ?<div>{`you face looks like this: ${avatar}`}</div> : null}\r\n            <div>{`there is ${publicCardPacksCount} cards available`}</div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, RequestRecoveryType, SetNewPasswordRequestType} from \"../m3-dal/api\";\r\nimport {onErrorAC} from \"./auth-reducer\";\r\nimport {message} from \"antd\";\r\n\r\ntype RecoveryStateType = typeof initialState\r\ntype SuccessfulActionType = ReturnType<typeof successful>\r\ntype ResponseRecoveryActionType = ReturnType<typeof responseRecoveryInfo>\r\ntype ResponseSetNewPasswordActionType = ReturnType<typeof responseSetNewPasswordInfo>\r\ntype SetNewPasswordActionType = ReturnType<typeof setNewPassword>\r\n\r\ntype ActionType = SuccessfulActionType | ResponseRecoveryActionType | ResponseSetNewPasswordActionType\r\n    | SetNewPasswordActionType\r\n\r\nconst initialState = {\r\n    isDone: true,\r\n    recoveryInfo: \"\",\r\n    setNewPasswordInfo: \"\",\r\n    isNewPasswordSet: false\r\n}\r\n\r\nconst SUCCESSFUL = 'SUCCESSFUL'\r\nconst RESPONSE_RECOVERY_INFO = 'RESPONSE_RECOVERY_INFO'\r\nconst RESPONSE_SET_NEW_PASSWORD_INFO = 'RESPONSE_SET_NEW_PASSWORD_INFO'\r\nconst SET_NEW_PASSWORD = 'SET_NEW_PASSWORD'\r\n\r\n\r\nexport const recoveryReducer = (state: RecoveryStateType = initialState, action: ActionType): RecoveryStateType => {\r\n    switch (action.type) {\r\n        case SUCCESSFUL:\r\n            return {...state, isDone: action.value}\r\n        case RESPONSE_RECOVERY_INFO:\r\n            return {...state, recoveryInfo: action.info}\r\n        case RESPONSE_SET_NEW_PASSWORD_INFO:\r\n            return {...state, setNewPasswordInfo: action.info}\r\n        case SET_NEW_PASSWORD:\r\n            return {...state, isNewPasswordSet: true}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const successful = (value: boolean) => ({type: SUCCESSFUL, value} as const)\r\nexport const responseRecoveryInfo = (info: string) => ({type: RESPONSE_RECOVERY_INFO, info} as const)\r\nexport const responseSetNewPasswordInfo = (info: string) => ({type: RESPONSE_SET_NEW_PASSWORD_INFO, info} as const)\r\nexport const setNewPassword = () => ({type: SET_NEW_PASSWORD} as const)\r\n\r\nexport const recoveryPassword = (data: RequestRecoveryType) => (dispatch: Dispatch) => {\r\n    authAPI.recoverPassword(data)\r\n        .then((res) => {\r\n            dispatch(successful(true))\r\n            dispatch(responseRecoveryInfo(res.data.info))\r\n            message.success(\"All ok\")\r\n        })\r\n\r\n        .catch((err) => {\r\n            dispatch(successful(false))\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\n\r\nexport const setNewPasswordTC = (data: SetNewPasswordRequestType) => (dispatch: Dispatch) => {\r\n    authAPI.setNewPassword(data)\r\n        .then((res) => {\r\n            dispatch(successful(true))\r\n            dispatch(setNewPassword())\r\n            dispatch(responseSetNewPasswordInfo(res.data.info))\r\n            message.success(\"All ok\")\r\n        })\r\n\r\n        .catch((err) => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./Recovery.module.css\";\r\nimport SuperInputText from \"../../../i1-main/m1-ui/u4-components/SuperComponents/rc1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../../i1-main/m1-ui/u4-components/SuperComponents/rc2-SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {recoveryPassword, successful} from \"../../../i1-main/m2-bll/recovery-reducer\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {Button, Form, Input} from \"antd\";\r\nimport {createUserTC} from \"../../../i1-main/m2-bll/registration-reducer\";\r\n\r\nexport const Recovery = () => {\r\n\r\n    const isDone = useSelector<AppRootStateType, boolean | null>( state => state.recovery.isDone)\r\n    const error = useSelector<AppRootStateType, string>(state=>state.isLoggedIn.error)\r\n    const dispatch  = useDispatch()\r\n\r\n    const [email, setEmail] = useState(\"valentyn.333k@gmail.com\")\r\n    const from = \"neko.nyakus.cafe@gmail.com\"\r\n    let message = `<div>password recovery link: <a href='https://valentyn-999.github.io/cards-fr#/create_new_password/$token$'>link</a></div>`\r\n\r\n\r\n    // const changeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n    //     dispatch(successful(false))\r\n    //     setEmail(event.currentTarget.value)\r\n    // }\r\n    //\r\n    // const sendEmail = () => {\r\n    //     debugger\r\n    //     dispatch(recoveryPassword({email, from, message}))\r\n    // }\r\n    type ValuesType = {\r\n        email: string\r\n    }\r\n    const onFinish = (values: ValuesType) => {\r\n        dispatch(successful(false))\r\n        dispatch(recoveryPassword({email: values.email,from, message}))\r\n    };\r\n    if (isDone) {\r\n        return <Redirect to={PATH.CREATE_NEW_PASSWORD}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.recovery}>\r\n            <Form\r\n                { ...{labelCol: { span: 8 }, wrapperCol: { span: 16 } }}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    rules={[{ required: true, message: 'Please input your email!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item {...{wrapperCol: { offset: 8, span: 16 }}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState} from \"react\";\r\nimport s from \"./CreateNewPassword.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setNewPasswordTC} from \"../../../i1-main/m2-bll/recovery-reducer\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {Button, Form, Input} from \"antd\";\r\n\r\ntype InfoType = {\r\n    isDone: boolean\r\n    recoveryInfo: string\r\n    setNewPasswordInfo: string\r\n    isNewPasswordSet: boolean\r\n}\r\ntype ParamTypes = {\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport const CreateNewPassword = () => {\r\n    // //декоративная информация для показа что все ок\r\n    const info = useSelector<AppRootStateType, InfoType>( state => state.recovery)\r\n    const dispatch = useDispatch()\r\n    const [password, setPassword] = useState('')\r\n    //зануление свойство isDone для поподания обратно на страницу восстановления пароля\r\n    // dispatch(successful(false))\r\n\r\n    const {resetPasswordToken} = useParams<ParamTypes>()\r\n    console.log(resetPasswordToken)\r\n\r\n    // const changePassword = () => {\r\n    //     console.log('you are inside changePassword fn')\r\n    //     dispatch(setNewPasswordTC({password, resetPasswordToken}))\r\n    //     console.log('inside the function',resetPasswordToken)\r\n    // }\r\n    // const createPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //     setPassword(e.currentTarget.value)\r\n    // }\r\n    type ValuesType = {\r\n        password: string\r\n    }\r\n    const onFinish = (values: ValuesType) => {\r\n        dispatch(setNewPasswordTC({password: values.password,resetPasswordToken}))\r\n    };\r\n    if (info.isNewPasswordSet) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.createNewPassword}>\r\n            <Form\r\n                { ...{labelCol: { span: 8 }, wrapperCol: { span: 16 } }}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[{ required: true, message: 'Please input your password!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item {...{wrapperCol: { offset: 8, span: 16 }}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","import React, {FC, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {logoutTC, onLogoutAC} from \"../../../i1-main/m2-bll/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\n\r\nexport const Logout: FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(onLogoutAC())\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import {\r\n    cardsAPI,\r\n    OnCardAddType,\r\n    RespondCardsType,\r\n    RespondCardType,\r\n    UpdatedRespondCardType,\r\n} from \"../../../i1-main/m3-dal/api\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {message} from \"antd\";\r\nimport {packsLoaderAC} from \"../t1-Packs/packs-reducer\";\r\n\r\nconst initialState = {\r\n    cards: [] as Array<RespondCardType>,\r\n    cardsTotalCount: 20,\r\n    maxGrade: Infinity,\r\n    minGrade: Infinity,\r\n    page: 1,\r\n    pageCount: 1,\r\n    packUserId: '',\r\n    cardsPack_id: '',\r\n    isLoading: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n//AC type\r\ntype CARDS = ReturnType<typeof cardsAC>\r\ntype CURRENT_PACK = ReturnType<typeof currentPackIdAC>\r\ntype UPDATED_CARD = ReturnType<typeof updatedCardAC>\r\ntype LOADER = ReturnType<typeof cardsLoaderAC>\r\n\r\ntype ActionsType = CARDS | CURRENT_PACK | UPDATED_CARD | LOADER\r\n//TC type\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case getCards:\r\n            return {...state, cards: action.data}\r\n        case cardsPack_id:\r\n            return {...state, cardsPack_id: action.value}\r\n        case cardsLoaderIsOn:\r\n            return {...state, isLoading: action.isLoading}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//const\r\nconst getCards = 'getCards'\r\nconst cardsPack_id = 'cardsPack_id'\r\nconst updatedCard = 'updatedCard'\r\nconst cardsLoaderIsOn = 'cardsLoaderIsOn'\r\n\r\n\r\n\r\n//ac\r\nexport const cardsAC = (data: Array<RespondCardType>) => ({ type: getCards, data } as const )\r\nexport const currentPackIdAC = (value: string) => ({ type: cardsPack_id, value } as const )\r\nexport const updatedCardAC = (data: Array<UpdatedRespondCardType>) => ({ type: updatedCard, data } as const )\r\nexport const cardsLoaderAC = (isLoading: boolean) => ({ type: cardsLoaderIsOn, isLoading} as const)\r\n\r\n//tc\r\nexport const getCardsTC = (data: string):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    dispatch(cardsLoaderAC(true))\r\n    cardsAPI.cards(data)\r\n        .then((res: AxiosResponse<RespondCardsType>) => {\r\n            // debugger\r\n            dispatch(cardsAC(res.data.cards))\r\n            // message.info(`Here is ${res.data.cardsTotalCount} cards available!`)\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error,2 )\r\n        })\r\n        .finally(() => {\r\n            dispatch(cardsLoaderAC(false))\r\n        })\r\n}\r\nexport const addCardTC = (data: {}):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    dispatch(cardsLoaderAC(true))\r\n    cardsAPI.cardAdd(data)\r\n        .then((res: AxiosResponse<OnCardAddType>) => {\r\n            dispatch(getCardsTC(res.data.newCard.cardsPack_id));\r\n            message.info(`New card has been created`)\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error,2)\r\n        })\r\n        .finally(() => {\r\n            dispatch(cardsLoaderAC(false))\r\n        })\r\n}\r\nexport const deleteCardTC = (data: string):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    dispatch(cardsLoaderAC(true))\r\n    cardsAPI.cardDelete(data)\r\n        .then((res: AxiosResponse<any>) => {\r\n            dispatch(getCardsTC(res.data.deletedCard.cardsPack_id));\r\n            message.info(`Picked card has been deleted`)\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error, 2)\r\n        })\r\n        .finally(() => {\r\n            dispatch(cardsLoaderAC(false))\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {RespondCardType} from \"../../../i1-main/m3-dal/api\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Button, Input, Layout, Modal, Popconfirm, Space, Spin, Table} from \"antd\";\r\nimport {Content} from \"antd/es/layout/layout\";\r\nimport {addCardTC, currentPackIdAC, deleteCardTC, getCardsTC} from \"./cards-reducer\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {ColumnsType} from \"antd/es/table\";\r\n\r\ninterface User {\r\n    question: string\r\n    answer: string\r\n    grade: number\r\n    lastUpdate: string\r\n    key: string\r\n}\r\n\r\n\r\nexport const Cards = () => {\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [question, setQuestion] = useState(\"\")\r\n    const [answer, setAnswer] = useState(\"\")\r\n\r\n    const state = useSelector<AppRootStateType, Array<RespondCardType>>(s => s.cards.cards)\r\n    const cardsPack_id = useSelector<AppRootStateType, string>(s => s.cards.cardsPack_id)\r\n    const isLoading = useSelector<AppRootStateType, boolean>(s => s.cards.isLoading)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleSetQuestion = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setQuestion(event.currentTarget.value)\r\n    }\r\n    const handleSetAnswer = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setAnswer(event.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (cardsPack_id) {\r\n        dispatch(getCardsTC(cardsPack_id))\r\n        }\r\n    }, [dispatch, cardsPack_id])\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n        dispatch(addCardTC({cardsPack_id, question, answer, }))\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    if (cardsPack_id === '') {\r\n        return <Redirect to={PATH.PACKS}/>\r\n    }\r\n\r\n\r\n    const columns: ColumnsType<User> = [\r\n        {\r\n            title: 'Question',\r\n            dataIndex: 'question',\r\n            key: 'question',\r\n            width: '300px',\r\n            render: (text: string) => {\r\n                return <div>{text}</div>\r\n            }\r\n        },\r\n        {\r\n            title: 'Answer',\r\n            dataIndex: 'answer',\r\n            key: 'answer',\r\n            width: '300px',\r\n            render: (text: string) => <div>{text}</div>\r\n        },\r\n        //Оценка колоды\r\n        {\r\n            title: 'Grade',\r\n            dataIndex: 'grade',\r\n            key: 'grade',\r\n            width: '100px',\r\n            sorter: {\r\n                compare: (a: any, b: any) => a.grade - b.grade,\r\n                multiple: 2\r\n            },\r\n            render: (grade: React.ReactNode) => (\r\n                <Space size=\"middle\">\r\n                    <div>{grade}</div>\r\n                </Space>\r\n            ),\r\n        },\r\n        //посл. обновлен.\r\n        {\r\n            title: 'Last Update',\r\n            dataIndex: 'lastUpdate',\r\n            key: 'lastUpdate',\r\n            width: '200px',\r\n        },\r\n        //actions\r\n        {\r\n            title: 'Actions',\r\n            key: 'actions',\r\n            render: (_: any, record: { key: React.Key }) => (\r\n                <Space size=\"middle\">\r\n                    <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\r\n                        <a>Delete</a>\r\n                    </Popconfirm>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const handleDelete = (key: React.Key) => {\r\n        const packId = key.toString()\r\n        dispatch(deleteCardTC(packId))\r\n        dispatch(currentPackIdAC(packId))\r\n    };\r\n    const data: User[] = state.map((pack) => ({\r\n        question: pack.question,\r\n        answer: pack.answer,\r\n        grade: pack.grade,\r\n        lastUpdate: pack.updated.substr(0, 10).replace(/-/g, \" \"),\r\n        key: pack._id,\r\n    }))\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Spin spinning={isLoading}>\r\n            <Layout>\r\n                <Button onClick={showModal}>Add Card</Button>\r\n                <Modal title=\"Add Card\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                    <span>Question: </span><Input value={question} onChange={handleSetQuestion}/>\r\n                    <span>Answer: </span><Input value={answer} onChange={handleSetAnswer}/>\r\n                </Modal>\r\n                <Content>\r\n                    <Table\r\n                        dataSource={data}\r\n                        columns={columns}\r\n                        // bordered\r\n                        pagination={{\r\n                            position: ['topRight'],\r\n                            defaultPageSize: 10,\r\n                            pageSizeOptions: ['3', '5', '10', '20', '25']\r\n                        }}\r\n\r\n                    />\r\n                </Content>\r\n            </Layout>\r\n            </Spin>\r\n        </>\r\n    )\r\n}","import {\r\n    CardPacksType,\r\n    cardsAPI,\r\n    PacksResponseType,\r\n    RequestPackType\r\n} from \"../../../i1-main/m3-dal/api\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport {message} from \"antd\";\r\n\r\nconst initialState = {\r\n    cardPacks: [] as Array<CardPacksType>,\r\n    cardsPack_id: '',\r\n    cardPacksTotalCount: 14,\r\n    maxCardsCount: 4,\r\n    minCardsCount: 0,\r\n    page: 1,\r\n    pageCount: 4,\r\n    isLoading: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype CARD_PACKS = ReturnType<typeof cardPacksAC>\r\ntype CURRENT_PACK = ReturnType<typeof currentPackIdAC>\r\ntype LOADER = ReturnType<typeof packsLoaderAC>\r\n\r\ntype ActionsType = CARD_PACKS | CURRENT_PACK | LOADER\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\n\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case getCardPacks:\r\n            return {...state, cardPacks: action.data}\r\n        case cardsPack_id:\r\n            return {...state, cardsPack_id: action.value}\r\n        case packsLoaderIsOn:\r\n            return {...state, isLoading: action.isLoading}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getCardPacks = 'getCardPacks'\r\nconst cardsPack_id = 'cardsPack_id'\r\nconst packsLoaderIsOn = 'packsLoaderIsOn'\r\n\r\n\r\n//ac\r\nexport const cardPacksAC = (data: Array<CardPacksType>) => ({ type: getCardPacks, data } as const )\r\nexport const currentPackIdAC = (value: string) => ({ type: cardsPack_id, value } as const )\r\nexport const packsLoaderAC = (isLoading: boolean) => ({ type: packsLoaderIsOn, isLoading} as const)\r\n\r\n//tc\r\nexport const getPacksTC = ():ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    dispatch(packsLoaderAC(true))\r\n    cardsAPI.packs()\r\n        .then((res:AxiosResponse<PacksResponseType>) => {\r\n            dispatch(cardPacksAC(res.data.cardPacks))\r\n        })\r\n        .catch((err) => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error,2)\r\n        })\r\n        .finally(() => {\r\n            dispatch(packsLoaderAC(false))\r\n        })\r\n}\r\n\r\nexport const addPackTC = (data: RequestPackType):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    dispatch(packsLoaderAC(true))\r\n    cardsAPI.packsAdd(data)\r\n        .then((res: AxiosResponse) => {\r\n            dispatch(getPacksTC())\r\n            message.info(`New pack ${res.data.newCardsPack.name} has been added`)\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error,2)\r\n        })\r\n        .finally(() => {\r\n            dispatch(packsLoaderAC(false))\r\n        })\r\n}\r\nexport const updatePack = (data: {_id: string, name: string}):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    dispatch(packsLoaderAC(true))\r\n    cardsAPI.packUpdate(data)\r\n        .then( res => {\r\n            dispatch(getPacksTC());\r\n            message.info(`Pack name has been updated to ${res.data.updatedCardsPack.name}`)\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error,2)\r\n        })\r\n        .finally(() => {\r\n            dispatch(packsLoaderAC(false))\r\n        })\r\n}\r\nexport const deletePackTC = (id?: string):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    dispatch(packsLoaderAC(true))\r\n    cardsAPI.packDelete(id)\r\n        .then( res => {\r\n            debugger\r\n            dispatch(getPacksTC())\r\n            message.info(`Pack ${res.data.deletedCardsPack.name} has been deleted`)\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error,2)\r\n        })\r\n        .finally(() => {\r\n            dispatch(packsLoaderAC(false))\r\n        })\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Button, Input, Layout, Modal, Popconfirm, Space, Spin, Table} from \"antd\";\r\nimport 'antd/dist/antd.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Content} from \"antd/es/layout/layout\";\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {ColumnsType} from \"antd/es/table\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {CardPacksType} from \"../../../i1-main/m3-dal/api\";\r\nimport {addPackTC, currentPackIdAC, deletePackTC, getPacksTC, updatePack} from \"./packs-reducer\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\n\r\n\r\ninterface User {\r\n    name: string\r\n    cardsCount: number\r\n    creator: string\r\n    lastUpdate: string\r\n    key: string\r\n}\r\n\r\nexport const Packs = () => {\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [packName, setPackName] = useState(\"\")\r\n    const [first, setFirst] = useState<boolean>(true);\r\n\r\n    const [updateModalVisible, setUpdateModalVisible] = useState(false)\r\n    const [updatePackName, setUpdatePackName] = useState(\"\")\r\n\r\n\r\n    // const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n\r\n\r\n    const state = useSelector<AppRootStateType, Array<CardPacksType>>(s => s.packs.cardPacks)\r\n    const currentId = useSelector<AppRootStateType, string>(s => s.packs.cardsPack_id)\r\n    const isLoading = useSelector<AppRootStateType, boolean>(s => s.packs.isLoading)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (first) {\r\n            dispatch(getPacksTC())\r\n            setFirst(false)\r\n        }\r\n    }, [dispatch, first])\r\n    ////\r\n    const onOk = () => {\r\n        setUpdateModalVisible(false);\r\n        dispatch(updatePack({_id: currentId, name: updatePackName}))\r\n        // dispatch(addPackTC({name: packName}))\r\n    };\r\n    const onCancel = () => {\r\n        setUpdateModalVisible(false);\r\n    };\r\n    const onUpdateName = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setUpdatePackName(event.currentTarget.value)\r\n    }\r\n\r\n    const modalCallBack = () => {\r\n        setUpdateModalVisible(true)\r\n    }\r\n\r\n    ////\r\n\r\n\r\n    //addPack {\r\n    //добовление имя колоды в useState\r\n    const handleSetName = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPackName(event.currentTarget.value)\r\n    }\r\n\r\n    //Показать модальное окно\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    // При нажатии в модальном окне кнопки ок\r\n    const handleOk = () => {\r\n        // debugger\r\n        setIsModalVisible(false);\r\n        dispatch(addPackTC({name: packName}))\r\n    };\r\n    // закрытие модалки по кнопке cancel или X\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    // забирается id колоды\r\n    const myCallBack = (id: string) => {\r\n        dispatch(currentPackIdAC(id))\r\n    }\r\n    // }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    const columns: ColumnsType<User> = [\r\n        //Название Колоды\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            width: '250px',\r\n            render: (value: React.ReactNode) => {\r\n                return <div>\r\n                    <NavLink to={PATH.CARDS}>{value}</NavLink>\r\n                </div>;\r\n            },\r\n        },\r\n        //Оценка колоды\r\n        {\r\n            title: 'Creator',\r\n            dataIndex: 'creator',\r\n            key: 'creator',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.grade - b.grade,\r\n            //     multiple: 2\r\n            // },\r\n            width: '100',\r\n            render: (creator: React.ReactNode) => (\r\n                <Space size=\"middle\">\r\n                    <div>{creator}</div>\r\n                </Space>\r\n            ),\r\n        },\r\n        //колиество карт в колоде\r\n        {\r\n            title: 'Cards Count',\r\n            dataIndex: 'cardsCount',\r\n            key: 'cardsCount',\r\n            width: '200',\r\n            sorter: {\r\n                compare: (a, b) => a.cardsCount - b.cardsCount,\r\n                multiple: 1\r\n            },\r\n        },\r\n        //посл. обновлен.\r\n        {\r\n            title: 'Last Update',\r\n            dataIndex: 'lastUpdate',\r\n            key: 'lastUpdate',\r\n        },\r\n        //actions\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (s, record: { key: React.Key }) => (\r\n                <div>\r\n                    <Space size={'middle'}>\r\n                        <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\r\n                            <a>Delete</a>\r\n                        </Popconfirm>\r\n                        <NavLink to={PATH.LEARN}>Learn</NavLink>\r\n                        <a rel=\"stylesheet\" onClick={() => {\r\n                            modalCallBack()\r\n                        }}>Update</a>\r\n                    </Space>\r\n\r\n                </div>\r\n\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const handleDelete = (key: React.Key) => {\r\n        const packId = key.toString()\r\n        dispatch(deletePackTC(packId))\r\n        dispatch(currentPackIdAC(packId))\r\n    };\r\n\r\n\r\n    const data: User[] = state.map((pack) => ({\r\n        name: pack.name,\r\n        cardsCount: pack.cardsCount,\r\n        lastUpdate: pack.updated.substr(0, 10).replace(/-/g, \" \"),\r\n        creator: pack.user_name,\r\n        key: pack._id\r\n    }))\r\n\r\n    return (\r\n        <>\r\n            <Spin spinning={isLoading}>\r\n                <Layout>\r\n\r\n                    <Button onClick={showModal}>Add Pack</Button>\r\n                    <Modal title=\"Add Pack\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                        <span>Pack name: </span><Input onChange={handleSetName}/>\r\n                    </Modal>\r\n                    <Modal title=\"Update pack name\" visible={updateModalVisible} onOk={onOk} onCancel={onCancel}>\r\n                        <span>Update pack name: </span><Input onChange={onUpdateName}/>\r\n                    </Modal>\r\n                    <Content>\r\n                        <Table<User>\r\n                            dataSource={data}\r\n                            columns={columns}\r\n                            onRow={(record) => {\r\n                                return {\r\n                                    onClick: () => {\r\n                                        myCallBack(record.key)\r\n                                    }, // click row\r\n                                };\r\n                            }}\r\n                            // bordered\r\n                            pagination={{\r\n                                position: ['topRight'],\r\n                                defaultPageSize: 10,\r\n                                pageSizeOptions: ['3', '5', '10', '20', '25']\r\n                            }}\r\n                        />\r\n                    </Content>\r\n                </Layout>\r\n            </Spin>\r\n        </>\r\n    )\r\n}","import {cardsAPI, LearnCardType, ThunkLearnPutType} from \"../../../i1-main/m3-dal/api\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {message} from \"antd\";\r\n\r\n\r\nconst initialState = {\r\n    card_id: '',\r\n    cardsPack_id: '',\r\n    created: '',\r\n    grade: 0,\r\n    more_id: '',\r\n    shots: 0,\r\n    updated: '',\r\n    user_id: '',\r\n    __v: 0,\r\n    _id: '',\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n//AC type\r\n\r\ntype CARD = ReturnType<typeof updateCardAC>\r\ntype ActionsType = CARD\r\n//TC type\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\n\r\nexport const learnReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case updatedCard:\r\n            return {\r\n                ...state,\r\n                card_id: action.data.card_id,\r\n                cardsPack_id: action.data.cardsPack_id,\r\n                created: action.data.created,\r\n                grade: action.data.grade,\r\n                more_id: action.data.more_id,\r\n                shots: action.data.shots,\r\n                updated: action.data.updated,\r\n                user_id: action.data.user_id,\r\n                __v: action.data.__v,\r\n                _id: action.data._id,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//const\r\nconst updatedCard = 'updatedCard'\r\n\r\n\r\n\r\n//ac\r\nexport const updateCardAC = (data: LearnCardType) => ({ type: updatedCard, data } as const )\r\n\r\n//tc\r\nexport const cardsEvaluation = (data: ThunkLearnPutType):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    debugger\r\n    cardsAPI.evaluationCard(data)\r\n        .then((res:AxiosResponse<LearnCardType>) => {\r\n            dispatch(updateCardAC(res.data))\r\n        })\r\n        .catch((err) => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error, 2)\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Button, Divider, Layout, message} from \"antd\";\r\nimport {Content} from \"antd/es/layout/layout\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {getCardsTC} from \"../t2-Cards/cards-reducer\";\r\nimport 'antd/dist/antd.css';\r\nimport s from './Learn.module.css'\r\nimport {cardsEvaluation} from \"./learn-reducer\";\r\n\r\nexport type CardType = {\r\n    _id: string;\r\n    cardsPack_id: string;\r\n\r\n    answer: string;\r\n    question: string;\r\n    grade: number;\r\n    shots: number;\r\n\r\n    type: string;\r\n    rating: number;\r\n    // more_id: string;\r\n\r\n    created: string;\r\n    updated: string;\r\n}\r\n\r\nconst messages = [\r\n    'Не переживай ты всё равно красавчик',\r\n    'Да ты всё и так знаешь, просто гонишь',\r\n    'Ну ты красавчик',\r\n    'Самурай, лети на собес!',\r\n    'Ты стопудовый мидл не меньше!'\r\n]\r\n\r\n\r\nconst getCard = (cards: Array<CardType>) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n    // console.log('test: ', sum, rand, res)\r\n\r\n    return cards[res.id + 1];\r\n}\r\n\r\n\r\nexport const Learn = () => {\r\n    const {cards} = useSelector((store: AppRootStateType) => store.cards);\r\n    // const {cards} = useSelector<AppRootStateType, CardType>(store => store.cards);\r\n    const cardsPack_id = useSelector<AppRootStateType, string>(s => s.cards.cardsPack_id)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const [first, setFirst] = useState<boolean>(true);\r\n    const [check, setCheck] = useState(false)\r\n    const [isDisable, setIsDisable] = useState(true)\r\n    const [isDisabledButton, setIsDisabledButton] = useState(false)\r\n\r\n    const [card, setCard] = useState<CardType>({\r\n        _id: 'fake',\r\n        cardsPack_id: '',\r\n\r\n        answer: '',\r\n        question: '',\r\n        grade: 0,\r\n        shots: 0,\r\n\r\n        type: '',\r\n        rating: 0,\r\n        // more_id: '',\r\n\r\n        created: '',\r\n        updated: '',\r\n    });\r\n\r\n    const myCallBack = useCallback((grade: number, card_id: string) => {\r\n        message.info(messages[grade - 1], 2)\r\n        dispatch(cardsEvaluation({grade, card_id}))\r\n        setIsDisable(false)\r\n        setIsDisabledButton(true)\r\n\r\n    }, [setIsDisable, dispatch])\r\n\r\n    const checkButton = useCallback((check: boolean) => {\r\n        setCheck(check)\r\n        if (cards.length > 0 && !check) {\r\n            setCard(getCard(cards));\r\n        }\r\n        setIsDisabledButton(false)\r\n    }, [setCheck, cards])\r\n\r\n    useEffect(() => {\r\n        if (first) {\r\n            dispatch(getCardsTC(cardsPack_id))\r\n            setFirst(false);\r\n        }\r\n\r\n        if (cards.length > 0) setCard(getCard(cards));\r\n        return () => {\r\n            // console.log('LearnContainer useEffect off');\r\n        }\r\n    }, [dispatch, cards, first, cardsPack_id])\r\n\r\n    if (cardsPack_id === '') {\r\n        return <Redirect to={PATH.PACKS}/>\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <> {card &&\r\n        <Layout className={s.layout}>\r\n            <Content className={s.content}>\r\n                <div>\r\n                    <div className={s.question}>\r\n                        <div className={s.question}>{card.question}</div>\r\n                        <Button onClick={() => checkButton(true) } disabled={isDisabledButton}>CHECK</Button></div>\r\n                    {check &&\r\n                    <div>\r\n                        <Divider/>\r\n                        <div className={s.answer}>{card.answer}</div>\r\n                        <div className={s.buttons}>\r\n                            <div className={s.button}>\r\n                                <Button onClick={() => myCallBack(1, card._id)} disabled={isDisabledButton}>I do not know it</Button>\r\n                            </div>\r\n                            <div className={s.button}>\r\n                                <Button onClick={() => myCallBack(2, card._id)} disabled={isDisabledButton}>I am not sure</Button>\r\n                            </div>\r\n                            <div className={s.button}>\r\n                                <Button onClick={() => myCallBack(3, card._id)} disabled={isDisabledButton}>I feel I knew it</Button>\r\n                            </div>\r\n                            <div className={s.button}>\r\n                                <Button onClick={() => myCallBack(4, card._id)} disabled={isDisabledButton}>I know it</Button>\r\n                            </div>\r\n                            <div className={s.button}>\r\n                                <Button onClick={() => myCallBack(5, card._id)} disabled={isDisabledButton}>I know well</Button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={s.nextButton}>\r\n                            <Button disabled={isDisable} onClick={() => checkButton(false)}>NEXT</Button>\r\n                        </div>\r\n                        <Divider/>\r\n                    </div>\r\n                    }\r\n                </div>\r\n            </Content>\r\n        </Layout>\r\n        }\r\n        </>\r\n    )\r\n}","import {PATH} from \"../u3-routes/Routes\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport React, {DetailedHTMLProps, HTMLAttributes, useEffect, useState} from \"react\";\r\nimport {authMe} from \"../../m2-bll/auth-reducer\";\r\nimport {Spin} from \"antd\";\r\n\r\ntype DivPropsType = DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\r\n\r\ntype AuthRedirectPagePropsType = DivPropsType & {}\r\n\r\nconst AuthRedirectPage: React.FC<AuthRedirectPagePropsType> = React.memo((\r\n    {\r\n        children,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const user = useSelector((store: AppRootStateType) => store.profile);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.isLoggedIn.isLoggedIn)\r\n    const [firstRendering, setFirstRendering] = useState<boolean>(true);\r\n    const [redirect, setRedirect] = useState<boolean>(false);\r\n    const [spin, setSpin] = useState<boolean>(user._id === \"\"); // !!! add request /auth/me\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (firstRendering) {\r\n            if (isLoggedIn) console.log(\"Error\");\r\n            if (user._id === \"\") {\r\n                dispatch(authMe());\r\n            }\r\n            setFirstRendering(false); // + rerender\r\n        } else {\r\n            if (!redirect && ((spin) || (!spin && user._id === \"\"))) {\r\n                setTimeout(() => setRedirect(true), 1500);\r\n            }\r\n            if (isLoggedIn && spin) setSpin(false);\r\n        }\r\n    }, [firstRendering, setFirstRendering, user._id, setRedirect, isLoggedIn,\r\n        dispatch, redirect, spin, setSpin]);\r\n\r\n    if (redirect) return <Redirect to={PATH.LOGIN}/>;\r\n    if (spin) return <Spin spinning={true}/>;\r\n\r\n    return (\r\n        <>\r\n            {/*<Log s={renderLog || \"rendering AuthRedirectPage\"}/>*/}\r\n            <div {...restProps}>\r\n                {children}\r\n            </div>\r\n        </>\r\n    );\r\n});\r\n\r\nexport default AuthRedirectPage;","import React from \"react\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport Error404 from \"../u4-components/co2-Error404/Error404\";\r\nimport {Login} from \"../../../i2-features/f1-Auth/f1-Login/Login\";\r\nimport {Registration} from \"../../../i2-features/f1-Auth/f3-Registration/Registration\";\r\nimport {Profile} from \"../u4-components/co1-Profile/Profile\";\r\nimport {Recovery} from \"../../../i2-features/f1-Auth/f2-Recovery/Recovery\";\r\nimport {CreateNewPassword} from \"../../../i2-features/f1-Auth/f2-Recovery/CreateNewPassword\";\r\nimport {Logout} from \"../../../i2-features/f1-Auth/f1-Login/Logout\";\r\nimport {Cards} from \"../../../i2-features/f2-Table/t2-Cards/Cards\";\r\nimport {Packs} from \"../../../i2-features/f2-Table/t1-Packs/Packs\";\r\nimport {Learn} from \"../../../i2-features/f2-Table/t3-Learn/Learn\";\r\nimport AuthRedirectPage from \"../u1-redirect/RedirectComponent\";\r\n\r\n\r\nexport const PATH = {\r\n    LOGIN: \"/login\",\r\n    REGISTRATION: '/registration',\r\n    PROFILE: '/profile',\r\n    RECOVERY: '/recovery',\r\n    CREATE_NEW_PASSWORD: '/create_new_password',\r\n    LOGOUT: '/logout',\r\n    PACKS: '/packs',\r\n    CARDS: '/cards',\r\n    LEARN: '/learn'\r\n\r\n\r\n\r\n    // add paths\r\n}\r\n\r\nfunction Routes() {\r\n    return (\r\n        <div>\r\n            {/*Switch выбирает первый подходящий роут*/}\r\n            <Switch>\r\n                 {/*в начале мы попадаем  на страницу \"/\" и переходим сразу на страницу PRE_JUNIOR*/}\r\n                {/*exact нужен чтоб указать полное совподение (что после \"/\" ничего не будет)*/}\r\n                {/*<Route path={\"/\"} exact render={() => <Redirect to={PATH.PROFILE}/>}/>*/}\r\n                <Route path={\"/\"} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.REGISTRATION} render={() => <Registration/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <AuthRedirectPage> <Profile/> </AuthRedirectPage>}/>\r\n                {/*<Route path={PATH.RECOVERY} render={() => <Recovery/>}/>*/}\r\n                <Route path={`${PATH.CREATE_NEW_PASSWORD}/:resetPasswordToken`}  render={() => <CreateNewPassword/>}/>\r\n                <Route path={PATH.RECOVERY} exact render={() => <Recovery/>}/>\r\n                <Route path={PATH.LOGOUT} render={() => <Logout/>}/>\r\n                <Route path={PATH.PACKS} render={() =><AuthRedirectPage><Packs/></AuthRedirectPage>}/>\r\n\r\n                <Route path={`${PATH.CARDS}/:packToken`} render={() => <Cards/>}/>\r\n                <Route path={`${PATH.CARDS}`} exact render={() =><AuthRedirectPage> <Cards/> </AuthRedirectPage>}/>\r\n                <Route path={`${PATH.LEARN}`} exact render={() =><AuthRedirectPage> <Learn/> </AuthRedirectPage>}/>\r\n\r\n\r\n\r\n                <Route path={'/404'} render={() => <Error404/>}/>\r\n                <Redirect from={'*'} to={'/404'}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../u3-routes/Routes\";\r\nimport s from './Header.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\n\r\n\r\nfunction Header() {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n\r\n    return (\r\n        <div className={s.background}>\r\n            {!isLoggedIn ?\r\n                <div className={s.nav_links}>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active} to={PATH.LOGIN}>Login</NavLink>\r\n                    </div>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active}\r\n                                 to={PATH.REGISTRATION}>Registration</NavLink>\r\n                    </div>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active} to={PATH.RECOVERY}>Forgot\r\n                            Password?</NavLink>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className={s.nav_links}>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active} to={PATH.PROFILE}>Profile</NavLink>\r\n                    </div>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active} to={PATH.PACKS}>Packs</NavLink>\r\n                    </div>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active} to={PATH.LOGOUT}>Logout</NavLink>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport Header from \"./u2-header/Header\";\r\nimport Routes from \"./u3-routes/Routes\";\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter >\r\n        <Header/>\r\n        <Routes/>\r\n      </HashRouter>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {recoveryReducer} from \"./recovery-reducer\";\r\nimport thunk from 'redux-thunk';\r\nimport {packsReducer} from \"../../i2-features/f2-Table/t1-Packs/packs-reducer\";\r\nimport {cardsReducer} from \"../../i2-features/f2-Table/t2-Cards/cards-reducer\";\r\nimport {learnReducer} from \"../../i2-features/f2-Table/t3-Learn/learn-reducer\";\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    isLoggedIn: authReducer,\r\n    profile: profileReducer,\r\n    isRegistered: registrationReducer,\r\n    recovery: recoveryReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    learn: learnReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './i1-main/m1-ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './i1-main/m2-bll/store';\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Header_background__3d8e3\",\"nav_links\":\"Header_nav_links__2fY8Y\",\"nav_container\":\"Header_nav_container__20c2T\",\"title_nav\":\"Header_title_nav__3-n7c\",\"active\":\"Header_active__35kSX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"site-layout-content\":\"Learn_site-layout-content__2BC6M\",\"components-layout-demo-top\":\"Learn_components-layout-demo-top__14vX7\",\"logo\":\"Learn_logo__3Vw2g\",\"ant-row-rtl\":\"Learn_ant-row-rtl__s01-6\",\"content\":\"Learn_content__diOPh\",\"question\":\"Learn_question__1s5sJ\",\"layout\":\"Learn_layout__22IdH\",\"buttons\":\"Learn_buttons__gdf5j\",\"button\":\"Learn_button__zD3xK\",\"nextButton\":\"Learn_nextButton__30IV7\",\"answer\":\"Learn_answer__3HpdM\"};"],"sourceRoot":""}
{"version":3,"sources":["i1-main/m1-ui/u4-components/co2-Error404/Error404.module.css","i2-features/f1-Auth/f1-Login/Login.module.css","i2-features/f1-Auth/f3-Registration/Registration.module.css","i2-features/f1-Auth/f2-Recovery/Recovery.module.css","i2-features/f1-Auth/f2-Recovery/CreateNewPassword.module.css","i1-main/m1-ui/u1-common/c1-assets/images/girl-dancer.gif","i1-main/m1-ui/u4-components/co2-Error404/Error404.tsx","i1-main/m3-dal/api.ts","i1-main/m2-bll/profile-reducer.ts","i1-main/m2-bll/auth-reducer.ts","i2-features/f1-Auth/f1-Login/Login.tsx","i1-main/m2-bll/registration-reducer.ts","i2-features/f1-Auth/f3-Registration/Registration.tsx","i1-main/m1-ui/u4-components/co1-Profile/Profile.tsx","i1-main/m2-bll/recovery-reducer.ts","i2-features/f1-Auth/f2-Recovery/Recovery.tsx","i2-features/f1-Auth/f2-Recovery/CreateNewPassword.tsx","i2-features/f1-Auth/f1-Login/Logout.tsx","i2-features/f2-Table/t2-Cards/cards-reducer.ts","i2-features/f2-Table/t2-Cards/Cards.tsx","i2-features/f2-Table/t1-Packs/packs-reducer.ts","i2-features/f2-Table/t1-Packs/Packs.tsx","i2-features/f2-Table/t3-Learn/learn-reducer.ts","i2-features/f2-Table/t3-Learn/Learn.tsx","i1-main/m1-ui/u3-routes/Routes.tsx","i1-main/m1-ui/u2-header/Header.tsx","i1-main/m1-ui/App.tsx","reportWebVitals.ts","i1-main/m2-bll/test-reducer.ts","i1-main/m2-bll/store.ts","index.tsx","i1-main/m1-ui/u2-header/Header.module.css","i2-features/f2-Table/t3-Learn/Learn.module.css"],"names":["module","exports","Error404","className","s","error404","error404_text","girl","src","alt","instance","axios","create","baseURL","withCredentials","authAPI","data","post","cardsAPI","get","cardsPack","id","delete","card","put","_id","question","initialState","email","name","publicCardPacksCount","created","Date","updated","isAdmin","verified","rememberMe","profileChanged","login","password","isLoggedIn","error","emailChanged","passwordChanged","rememberMeChanged","onSubmit","onError","onLogout","onErrorAC","type","onSubmitTC","dispatch","then","res","avatar","value","catch","err","response","message","Login","useDispatch","useSelector","to","PATH","PROFILE","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","passwordChangedAC","rememberMeChangedAC","Item","label","rules","required","Password","offset","valuePropName","htmlType","CHANGE_EMAIL","CHANGE_PASSWORD","IS_REGISTRATION","isRegistered","createUserTC","dataRegistration","status","console","log","Registration","state","LOGIN","registration","Profile","profile","isDone","recoveryInfo","setNewPasswordInfo","isNewPasswordSet","SUCCESSFUL","RESPONSE_RECOVERY_INFO","RESPONSE_SET_NEW_PASSWORD_INFO","SET_NEW_PASSWORD","successful","recoveryPassword","info","success","setNewPasswordTC","Recovery","recovery","useState","CREATE_NEW_PASSWORD","from","CreateNewPassword","resetPasswordToken","useParams","createNewPassword","Logout","useEffect","cards","cardsTotalCount","maxGrade","Infinity","minGrade","page","pageCount","packUserId","cardsPack_id","getCards","getCardsTC","cardsAC","Cards","isModalVisible","setIsModalVisible","setQuestion","answer","setAnswer","isEditable","setIsEditable","title","setTitle","find","cr","PACKS","handelTitleChange","e","currentTarget","switchToEditable","switchToUneditable","thunkRequest","key","updatedCard","updateCardTC","columns","dataIndex","width","render","text","record","onBlur","onChange","onDoubleClick","sorter","compare","a","b","grade","multiple","size","_","onConfirm","handleDelete","packId","toString","deletedCard","deleteCardTC","map","pack","lastUpdate","substr","replace","onClick","visible","onOk","newCard","addCardTC","onCancel","event","dataSource","bordered","pagination","position","defaultPageSize","pageSizeOptions","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","getCardPacks","currentPackIdAC","getPacksTC","deletePackTC","Packs","packName","setPackName","packs","CARDS","cardsCount","LEARN","learnThisPack","addPackTC","rowKey","onRow","card_id","more_id","shots","user_id","__v","cardsEvaluation","updateCardAC","messages","getCard","sum","reduce","acc","rand","Math","random","i","newSum","Learn","store","first","setFirst","check","setCheck","isDisable","setIsDisable","rating","setCard","myCallBack","useCallback","checkButton","length","layout","content","buttons","button","nextButton","disabled","REGISTRATION","RECOVERY","LOGOUT","Routes","path","exact","Header","background","nav_links","nav_container","title_nav","activeClassName","active","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","testObj","firstCase","rootReducer","combineReducers","test","action","learn","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51b9fec3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error404\":\"Error404_error404__1ry36\",\"error404_text\":\"Error404_error404_text__2VILg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2iPmy\",\"loginForm\":\"Login_loginForm__AYLAX\",\"title\":\"Login_title__Nx4Wo\",\"message\":\"Login_message__3XIc9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registration\":\"Registration_registration__Gz9l-\",\"registrationInner\":\"Registration_registrationInner__1ikOA\",\"title\":\"Registration_title__3nqo_\",\"message\":\"Registration_message__3rORD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recovery\":\"Recovery_recovery__7ban8\",\"title\":\"Recovery_title__3U_nk\",\"button\":\"Recovery_button__3WSC1\",\"message\":\"Recovery_message__10zGr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createNewPassword\":\"CreateNewPassword_createNewPassword__14jYR\",\"button\":\"CreateNewPassword_button__1zOYG\"};","export default __webpack_public_path__ + \"static/media/girl-dancer.cfef6556.gif\";","import React from \"react\";\r\nimport s from './Error404.module.css'\r\nimport girl from '../../u1-common/c1-assets/images/girl-dancer.gif'\r\n\r\nfunction Error404() {\r\n    return (\r\n        <div className={s.error404}>\r\n            <div className={s.error404_text}>404\r\n            Page not found!</div><br/>\r\n            <div className={s.girl}><img src={girl} alt=\"\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error404;\r\n","import axios from \"axios\";\r\nimport {AxiosResponseType, LoginType} from \"../m2-bll/auth-reducer\";\r\n\r\n\r\n//'https://neko-back.herokuapp.com/2.0/'\r\n//\"http://localhost:7542/2.0/\"\r\n\r\n// 'valentyn.333k@gmail.com'\r\n// '111qwe222'\r\nconst instance  = axios.create ({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true,\r\n})\r\n\r\nexport type RequestRecoveryType = {\r\n    email: string,\r\n    from?: string,\r\n    message?: string\r\n}\r\n\r\ntype RecoveryResponseType = {\r\n    info: any\r\n    status: number\r\n    statusText: string\r\n    error?: string\r\n}\r\nexport type RequestType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\nexport type ResponseType = {\r\n    data: any\r\n    status: number\r\n    statusText: string\r\n    error?: string\r\n}\r\nexport type SetNewPasswordRequestType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\nexport type SetNewPasswordResponseType = {\r\n    info: string\r\n    error: string;\r\n}\r\n\r\nexport type CardPacksType = {\r\n    \"_id\": string,\r\n    \"user_id\": string,\r\n    \"user_name\": string,\r\n    \"private\": boolean,\r\n    \"name\": string,\r\n    \"path\": string,\r\n    \"grade\": number,\r\n    \"shots\": number,\r\n    \"cardsCount\": number,\r\n    \"type\": string,\r\n    \"rating\": number,\r\n    \"created\": string,\r\n    \"updated\": string,\r\n    \"more_id\": string,\r\n    \"__v\": number\r\n}\r\n\r\nexport type PacksResponseType = {\r\n    cardPacks: Array<CardPacksType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n// export type PaginationType = {\r\n//     cardPacksTotalCount: number\r\n//     maxCardsCount: number\r\n//     minCardsCount: number\r\n//     page: number\r\n//     pageCount: number\r\n//     token: string\r\n// }\r\n\r\nexport type RequestPackType = {\r\n    name?: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    deckCover?: string\r\n    private?: boolean\r\n    type?: string\r\n}\r\n\r\nexport type RespondCardsType = {\r\n    cards: Array<RespondCardType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n    more_id: string\r\n\r\n}\r\n\r\nexport type RespondCardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n    more_id: string\r\n}\r\n\r\nexport type UpdatedRespondCardType = {\r\n    answer: string\r\n    answerImg: string\r\n    answerVideo: string\r\n    cardsPack_id: string\r\n    comments: string\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    question: string\r\n    questionImg: string\r\n    questionVideo: string\r\n    rating: number\r\n    shots: number\r\n    type: \"card\"\r\n    updated: string\r\n    user_id: string\r\n    __v: number\r\n    _id: string\r\n}\r\nexport type UpdatedRespondDataCardType = {\r\n    token: string\r\n    tokenDeathTime: number\r\n    updatedCard: UpdatedRespondCardType\r\n}\r\n\r\nexport type RequestCardType = {\r\n    cardsPack_id: string\r\n}\r\nexport type NewCardType = {\r\n    answer: string\r\n    cardsPack_id: string\r\n    comments: string\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    question: string\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    __v: number\r\n    _id: string\r\n}\r\nexport type OnCardAddType = {\r\n    newCard: NewCardType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type ThunkLearnPutType = {\r\n    grade: number,\r\n    card_id: string\r\n}\r\n\r\nexport type LearnCardType = {\r\n    card_id: string\r\n    cardsPack_id: string\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    shots: number\r\n    updated: string\r\n    user_id: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport const authAPI = {\r\n    recoverPassword(data: RequestRecoveryType) {\r\n        return  instance.post<RecoveryResponseType>('auth/forgot', data)\r\n    },\r\n    login(data: LoginType) {\r\n        return instance.post<AxiosResponseType>('auth/login', data)\r\n    },\r\n    setNewPassword(data: SetNewPasswordRequestType) {\r\n        return instance.post<SetNewPasswordResponseType>('auth/set-new-password', data)\r\n    },\r\n    signUp(data: RequestType) {\r\n        return instance.post<ResponseType>('auth/register', data)\r\n    },\r\n    ping() {\r\n        return instance.get('ping')\r\n    }\r\n}\r\n\r\nexport const cardsAPI = {\r\n    packs() {\r\n        // debugger\r\n        return instance.get(`cards/pack?pageCount=100`)\r\n        //?packName=english // не обязательно\r\n        // &min=3 // не обязательно\r\n        // &max=9 // не обязательно\r\n        // &sortPacks=0updated // не обязательно\r\n        // &page=1 // не обязательно\r\n        // &pageCount=4 // не обязательно\r\n    },\r\n    packsAdd(data: RequestPackType) {\r\n        // debugger//\r\n        return instance.post(`cards/pack`, {cardsPack: data})\r\n    },\r\n    packDelete(id?: string) {\r\n        // debugger\r\n        return instance.delete(`cards/pack?id=${id}`)\r\n    },\r\n    packUpdate(data: {_id: string, name?: string}) {\r\n        // debugger\r\n        return instance.put(`cards/pack`, {cardsPack: data})\r\n    },\r\n\r\n    cards(data: string) {\r\n        debugger\r\n        return instance.get(`cards/card/?cardsPack_id=${data}&pageCount=20`)\r\n    },\r\n    cardAdd(data: {}) {\r\n        // debugger\r\n        return instance.post(`cards/card/`, {card: data})\r\n    },\r\n    cardDelete(data: string) {\r\n        // debugger\r\n        return instance.delete(`cards/card?id=${data}`)\r\n    },\r\n    cardUpdate(data: {}) {\r\n        // debugger\r\n        return instance.put(`cards/card`,{\r\n            card: {\r\n                _id: data,\r\n                question: 'updated message'\r\n            }\r\n        })\r\n    },\r\n    evaluationCard(data: {}) {\r\n        // debugger\r\n        return instance.put('cards/grade', data)\r\n    }\r\n}","import {AxiosResponseType} from \"./auth-reducer\";\r\n\r\nconst initialState: AxiosResponseType = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    publicCardPacksCount: 0,\r\n    created: new Date(),\r\n    updated: new Date(),\r\n    isAdmin: false,\r\n    verified: false,\r\n    rememberMe: false,\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\ntype PROFILE = ReturnType<typeof profileAC>\r\n\r\n\r\ntype ActionsType = PROFILE\r\n\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case profileChanged:\r\n            return {\r\n                ...state,\r\n                _id: action._id,\r\n                email: action.email,\r\n                name: action.name,\r\n                publicCardPacksCount: action.publicCardPacksCount,\r\n                created: action.created,\r\n                updated: action.updated,\r\n                isAdmin: action.isAdmin,\r\n                verified: action.verified,\r\n                rememberMe: action.rememberMe,\r\n                avatar: action.avatar,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst profileChanged = 'profileChanged'\r\n\r\n\r\nexport const profileAC = (\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    publicCardPacksCount: number, // количество колод\r\n    created: Date,\r\n    updated: Date,\r\n    isAdmin: boolean,\r\n    verified: boolean, // подтвердил ли почту\r\n    rememberMe: boolean,\r\n    avatar?: string,\r\n    error?: string,\r\n) => ({type: profileChanged, _id, email, name, avatar, publicCardPacksCount, created,\r\n    updated, isAdmin, verified, rememberMe, error} as const)\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../m3-dal/api\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {profileAC} from \"./profile-reducer\";\r\nimport {message} from \"antd\";\r\n\r\n\r\ntype EMAIL_CHANGED = ReturnType<typeof emailChangedAC>\r\ntype PASSWORD_CHANGED = ReturnType<typeof passwordChangedAC>\r\ntype ON_SUBMIT = ReturnType<typeof onSubmitAC>\r\ntype REMEMBER_ME = ReturnType<typeof rememberMeChangedAC>\r\nexport type ON_ERROR = ReturnType<typeof onErrorAC>\r\nexport type ON_LOGOUT = ReturnType<typeof onLogoutAC>\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\n\r\nexport type LoginType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n}\r\n\r\nexport type AxiosResponseType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n\r\n    error?: string;\r\n}\r\n\r\nconst initialState = {\r\n    login: '',\r\n    password: '',\r\n    rememberMe: false,\r\n    isLoggedIn: false,\r\n    error: ''\r\n}\r\n\r\n\r\ntype ActionsType = EMAIL_CHANGED | PASSWORD_CHANGED | ON_SUBMIT | REMEMBER_ME | ON_ERROR\r\n | ON_LOGOUT\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case emailChanged:\r\n            return {...state, login: action.value}\r\n        case passwordChanged:\r\n            return {...state, password: action.value}\r\n        case rememberMeChanged:\r\n            return {...state, rememberMe: action.value}\r\n        case onSubmit:\r\n            return {...state, isLoggedIn: action.value}\r\n        case onLogout:\r\n            return {...state, isLoggedIn: action.value}\r\n        case onError:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst emailChanged = 'emailChanged'\r\nconst passwordChanged = 'passwordChanged'\r\nconst rememberMeChanged = 'rememberMeChanged'\r\nconst onSubmit = 'onSubmit'\r\nexport const onError = 'onError'\r\nexport const onLogout = 'onLogout'\r\n\r\nexport const emailChangedAC = (value: string) => ({type: emailChanged, value} as const)\r\nexport const passwordChangedAC = (value: string) => ({type: passwordChanged, value} as const)\r\nexport const rememberMeChangedAC = (value: boolean) => ({type: rememberMeChanged, value} as const)\r\nexport const onSubmitAC = () => ({type: onSubmit, value: true} as const)\r\nexport const onLogoutAC = () => ({type: onLogout, value: false} as const)\r\nexport const onErrorAC  = (error: string) => ({type: onError, error} as const)\r\n\r\n\r\n\r\nexport const onSubmitTC = (data: LoginType) => (dispatch: Dispatch) => {\r\n    authAPI.login(data)\r\n\r\n        .then((res: AxiosResponse<AxiosResponseType>) => {\r\n            // console.log('you have logged in')\r\n            dispatch(onSubmitAC())\r\n            dispatch(profileAC(res.data._id, res.data.email, res.data.name, res.data.publicCardPacksCount, res.data.created,\r\n                res.data.updated, res.data.isAdmin, res.data.verified, res.data.rememberMe, res.data.avatar, res.data.error))\r\n        })\r\n\r\n        .catch((err) => {\r\n            const error = err.response\r\n            ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\n\r\n\r\n\r\n","import React, {FC} from \"react\";\r\nimport s from \"./Login.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {\r\n    emailChangedAC,\r\n    InitialStateType,\r\n    onSubmitTC,\r\n    passwordChangedAC,\r\n    rememberMeChangedAC\r\n} from \"../../../i1-main/m2-bll/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {Form, Input, Button, Checkbox, message} from 'antd';\r\n\r\n\r\nexport const Login: FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const state = useSelector<AppRootStateType, InitialStateType>(s => s.isLoggedIn)\r\n\r\n\r\n    type ValuesType= {\r\n        password: string\r\n        email: string\r\n        rememberMe: boolean\r\n    }\r\n\r\n    const onFinish = (values: ValuesType) => {\r\n        dispatch(emailChangedAC(values.email))\r\n        dispatch(passwordChangedAC(values.password))\r\n        dispatch(rememberMeChangedAC(values.rememberMe))\r\n        dispatch(onSubmitTC({email: values.email, password: values.password, rememberMe: values.rememberMe}))\r\n    };\r\n\r\n    if (state.isLoggedIn) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.login}>\r\n            <Form\r\n                { ...{labelCol: { span: 8 }, wrapperCol: { span: 16 } }}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    rules={[{ required: true, message: 'Please input your email!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[{ required: true, message: 'Please input your password!' }]}\r\n                >\r\n                    <Input.Password />\r\n                </Form.Item>\r\n\r\n                <Form.Item { ...{wrapperCol: { offset: 8, span: 16 }}} name=\"rememberMe\" valuePropName=\"checked\">\r\n                    <Checkbox>Remember me</Checkbox>\r\n                </Form.Item>\r\n\r\n                <Form.Item {...{wrapperCol: { offset: 8, span: 16 }}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, RequestType} from \"../m3-dal/api\";\r\nimport {ON_ERROR, onError, onErrorAC} from \"./auth-reducer\";\r\nimport {message} from \"antd\";\r\n\r\nconst CHANGE_EMAIL = 'CHANGE_EMAIL',\r\n    CHANGE_PASSWORD = 'CHANGE_PASSWORD',\r\n    IS_REGISTRATION = 'IS_REGISTRATION'\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n    email: '',\r\n    password: '',\r\n    error: ''\r\n}\r\nexport type InitialStateRegistrationType = typeof initialState\r\n\r\ntype ChangeEmailAT = ReturnType<typeof changeEmail>\r\ntype ChangePasswordAT = ReturnType<typeof changePassword>\r\ntype CheckRegistrationAT = ReturnType<typeof checkRegistration>\r\n\r\n\r\ntype ActionType =\r\n    | ChangeEmailAT\r\n    | ChangePasswordAT\r\n    | CheckRegistrationAT\r\n    | ON_ERROR\r\n\r\n\r\nexport const registrationReducer = (state: InitialStateRegistrationType = initialState, action: ActionType): InitialStateRegistrationType => {\r\n    switch (action.type) {\r\n        case CHANGE_EMAIL:\r\n            return {...state, email: action.value}\r\n        case CHANGE_PASSWORD:\r\n            return {...state, password: action.value}\r\n        case IS_REGISTRATION:\r\n            return {...state, isRegistered: action.isRegistered}\r\n        case onError:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//ac\r\nexport const changeEmail = (value: string) => ({type: CHANGE_EMAIL, value} as const)\r\nexport const changePassword = (value: string) => ({type: CHANGE_PASSWORD, value} as const)\r\nconst checkRegistration = (isRegistered: boolean) => ({type: IS_REGISTRATION, isRegistered} as const)\r\n\r\n//tc\r\nexport const createUserTC = (dataRegistration: RequestType) => (dispatch: Dispatch) => {\r\n    authAPI.signUp({email: dataRegistration.email, password: dataRegistration.password})\r\n        .then((res) => {\r\n            if (res.status === 201) {\r\n                dispatch(checkRegistration(true))\r\n            } else {\r\n                console.log('error')\r\n            }\r\n        })\r\n        .catch(err => {\r\n            const error = err.response ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./Registration.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {createUserTC, InitialStateRegistrationType} from \"../../../i1-main/m2-bll/registration-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {Button, Form, Input} from \"antd\";\r\n\r\n\r\nexport const Registration = () => {\r\n    const state = useSelector<AppRootStateType, InitialStateRegistrationType>(state=>state.isRegistered)\r\n    const  dispatch = useDispatch()\r\n\r\n    type ValuesType= {\r\n        password: string\r\n        email: string\r\n    }\r\n    const onFinish = (values: ValuesType) => {\r\n        dispatch(createUserTC({email: values.email, password: values.password}))\r\n    };\r\n    if (state.isRegistered) {\r\n       return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n    return (\r\n        <div className={s.registration}>\r\n            <Form\r\n                { ...{labelCol: { span: 8 }, wrapperCol: { span: 16 } }}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    rules={[{ required: true, message: 'Please input your email!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[{ required: true, message: 'Please input your password!' }]}\r\n                >\r\n                    <Input.Password />\r\n                </Form.Item>\r\n                <Form.Item {...{wrapperCol: { offset: 8, span: 16 }}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Profile.module.css\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../u3-routes/Routes\";\r\n\r\nexport const Profile = () => {\r\n\r\n    const name = useSelector<AppRootStateType, string>(s => s.profile.name)\r\n    const avatar = useSelector<AppRootStateType, string | undefined>(s => s.profile.avatar)\r\n    const publicCardPacksCount = useSelector<AppRootStateType, number>(s => s.profile.publicCardPacksCount)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n    return (\r\n        <div className={s.profile}>\r\n            <div>{`your name is ${name}`}</div>\r\n            {avatar ?<div>{`you face looks like this: ${avatar}`}</div> : null}\r\n            <div>{`there is ${publicCardPacksCount} cards available`}</div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, RequestRecoveryType, SetNewPasswordRequestType} from \"../m3-dal/api\";\r\nimport {onErrorAC} from \"./auth-reducer\";\r\nimport {message} from \"antd\";\r\n\r\ntype RecoveryStateType = typeof initialState\r\ntype SuccessfulActionType = ReturnType<typeof successful>\r\ntype ResponseRecoveryActionType = ReturnType<typeof responseRecoveryInfo>\r\ntype ResponseSetNewPasswordActionType = ReturnType<typeof responseSetNewPasswordInfo>\r\ntype SetNewPasswordActionType = ReturnType<typeof setNewPassword>\r\n\r\ntype ActionType = SuccessfulActionType | ResponseRecoveryActionType | ResponseSetNewPasswordActionType\r\n    | SetNewPasswordActionType\r\n\r\nconst initialState = {\r\n    isDone: true,\r\n    recoveryInfo: \"\",\r\n    setNewPasswordInfo: \"\",\r\n    isNewPasswordSet: false\r\n}\r\n\r\nconst SUCCESSFUL = 'SUCCESSFUL'\r\nconst RESPONSE_RECOVERY_INFO = 'RESPONSE_RECOVERY_INFO'\r\nconst RESPONSE_SET_NEW_PASSWORD_INFO = 'RESPONSE_SET_NEW_PASSWORD_INFO'\r\nconst SET_NEW_PASSWORD = 'SET_NEW_PASSWORD'\r\n\r\n\r\nexport const recoveryReducer = (state: RecoveryStateType = initialState, action: ActionType): RecoveryStateType => {\r\n    switch (action.type) {\r\n        case SUCCESSFUL:\r\n            return {...state, isDone: action.value}\r\n        case RESPONSE_RECOVERY_INFO:\r\n            return {...state, recoveryInfo: action.info}\r\n        case RESPONSE_SET_NEW_PASSWORD_INFO:\r\n            return {...state, setNewPasswordInfo: action.info}\r\n        case SET_NEW_PASSWORD:\r\n            return {...state, isNewPasswordSet: true}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const successful = (value: boolean) => ({type: SUCCESSFUL, value} as const)\r\nexport const responseRecoveryInfo = (info: string) => ({type: RESPONSE_RECOVERY_INFO, info} as const)\r\nexport const responseSetNewPasswordInfo = (info: string) => ({type: RESPONSE_SET_NEW_PASSWORD_INFO, info} as const)\r\nexport const setNewPassword = () => ({type: SET_NEW_PASSWORD} as const)\r\n\r\nexport const recoveryPassword = (data: RequestRecoveryType) => (dispatch: Dispatch) => {\r\n    authAPI.recoverPassword(data)\r\n        .then((res) => {\r\n            // console.log('.then')\r\n            dispatch(successful(true))\r\n            dispatch(responseRecoveryInfo(res.data.info))\r\n            message.success(\"All ok\")\r\n        })\r\n\r\n        .catch((err) => {\r\n            // console.log('.catch')\r\n            dispatch(successful(false))\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\n\r\nexport const setNewPasswordTC = (data: SetNewPasswordRequestType) => (dispatch: Dispatch) => {\r\n    authAPI.setNewPassword(data)\r\n\r\n        .then((res) => {\r\n            dispatch(successful(true))\r\n            dispatch(setNewPassword())\r\n            dispatch(responseSetNewPasswordInfo(res.data.info))\r\n            message.success(\"All ok\")\r\n        })\r\n\r\n        .catch((err) => {\r\n            dispatch(successful(false))\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./Recovery.module.css\";\r\nimport SuperInputText from \"../../../i1-main/m1-ui/u4-components/SuperComponents/rc1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../../i1-main/m1-ui/u4-components/SuperComponents/rc2-SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {recoveryPassword, successful} from \"../../../i1-main/m2-bll/recovery-reducer\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {Button, Form, Input} from \"antd\";\r\nimport {createUserTC} from \"../../../i1-main/m2-bll/registration-reducer\";\r\n\r\nexport const Recovery = () => {\r\n\r\n    const isDone = useSelector<AppRootStateType, boolean | null>( state => state.recovery.isDone)\r\n    const error = useSelector<AppRootStateType, string>(state=>state.isLoggedIn.error)\r\n    const dispatch  = useDispatch()\r\n\r\n    const [email, setEmail] = useState(\"valentyn.333k@gmail.com\")\r\n    const from = \"neko.nyakus.cafe@gmail.com\"\r\n    let message = `<div>password recovery link: <a href='https://valentyn-999.github.io/cards-fr#/create_new_password/$token$'>link</a></div>`\r\n\r\n\r\n    // const changeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n    //     dispatch(successful(false))\r\n    //     setEmail(event.currentTarget.value)\r\n    // }\r\n    //\r\n    // const sendEmail = () => {\r\n    //     debugger\r\n    //     dispatch(recoveryPassword({email, from, message}))\r\n    // }\r\n    type ValuesType = {\r\n        email: string\r\n    }\r\n    const onFinish = (values: ValuesType) => {\r\n        dispatch(successful(false))\r\n        dispatch(recoveryPassword({email: values.email,from, message}))\r\n    };\r\n    if (isDone) {\r\n        return <Redirect to={PATH.CREATE_NEW_PASSWORD}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.recovery}>\r\n            <Form\r\n                { ...{labelCol: { span: 8 }, wrapperCol: { span: 16 } }}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    rules={[{ required: true, message: 'Please input your email!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item {...{wrapperCol: { offset: 8, span: 16 }}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState} from \"react\";\r\nimport s from \"./CreateNewPassword.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setNewPasswordTC} from \"../../../i1-main/m2-bll/recovery-reducer\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {Button, Form, Input} from \"antd\";\r\n\r\ntype InfoType = {\r\n    isDone: boolean\r\n    recoveryInfo: string\r\n    setNewPasswordInfo: string\r\n    isNewPasswordSet: boolean\r\n}\r\ntype ParamTypes = {\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport const CreateNewPassword = () => {\r\n    // //декоративная информация для показа что все ок\r\n    const info = useSelector<AppRootStateType, InfoType>( state => state.recovery)\r\n    const dispatch = useDispatch()\r\n    const [password, setPassword] = useState('')\r\n    //зануление свойство isDone для поподания обратно на страницу восстановления пароля\r\n    // dispatch(successful(false))\r\n\r\n    const {resetPasswordToken} = useParams<ParamTypes>()\r\n    console.log(resetPasswordToken)\r\n\r\n    // const changePassword = () => {\r\n    //     console.log('you are inside changePassword fn')\r\n    //     dispatch(setNewPasswordTC({password, resetPasswordToken}))\r\n    //     console.log('inside the function',resetPasswordToken)\r\n    // }\r\n    // const createPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //     setPassword(e.currentTarget.value)\r\n    // }\r\n    type ValuesType = {\r\n        password: string\r\n    }\r\n    const onFinish = (values: ValuesType) => {\r\n        dispatch(setNewPasswordTC({password: values.password,resetPasswordToken}))\r\n    };\r\n    if (info.isNewPasswordSet) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.createNewPassword}>\r\n            <Form\r\n                { ...{labelCol: { span: 8 }, wrapperCol: { span: 16 } }}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[{ required: true, message: 'Please input your password!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item {...{wrapperCol: { offset: 8, span: 16 }}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","import React, {FC, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {onLogoutAC} from \"../../../i1-main/m2-bll/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\n\r\nexport const Logout: FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(onLogoutAC())\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import {\r\n    cardsAPI,\r\n    RespondCardsType,\r\n    RespondCardType,\r\n    OnCardAddType, UpdatedRespondCardType, UpdatedRespondDataCardType\r\n} from \"../../../i1-main/m3-dal/api\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\n\r\n\r\nconst initialState = {\r\n    cards: [] as Array<RespondCardType>,\r\n    cardsTotalCount: 20,\r\n    maxGrade: Infinity,\r\n    minGrade: Infinity,\r\n    page: 1,\r\n    pageCount: 1,\r\n    packUserId: '',\r\n    cardsPack_id: ''\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n//AC type\r\ntype CARDS = ReturnType<typeof cardsAC>\r\ntype CURRENT_PACK = ReturnType<typeof currentPackIdAC>\r\ntype UPDATED_CARD = ReturnType<typeof updatedCardAC>\r\ntype ActionsType = CARDS | CURRENT_PACK | UPDATED_CARD\r\n//TC type\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case getCards:\r\n            return {...state, cards: action.data}\r\n        case cardsPack_id:\r\n            return {...state, cardsPack_id: action.value}\r\n        // case updatedCard:\r\n        //     return {...state, cards: action.data}\r\n            //     answer: action.\r\n            //     }\r\n            // question: string\r\n            // cardsPack_id: string\r\n            // grade: number\r\n            // rating: number\r\n            // shots: number\r\n            // type: string\r\n            // user_id: string\r\n            // created: string\r\n            // updated: string\r\n            // __v: number\r\n            // _id: string}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//const\r\nconst getCards = 'getCards'\r\nconst cardsPack_id = 'cardsPack_id'\r\nconst updatedCard = 'updatedCard'\r\n\r\n\r\n//ac\r\nexport const cardsAC = (data: Array<RespondCardType>) => ({ type: getCards, data } as const )\r\nexport const currentPackIdAC = (value: string) => ({ type: cardsPack_id, value } as const )\r\nexport const updatedCardAC = (data: Array<UpdatedRespondCardType>) => ({ type: updatedCard, data } as const )\r\n\r\n//tc\r\nexport const getCardsTC = (data: string):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    debugger\r\n    cardsAPI.cards(data)\r\n\r\n        .then((res: AxiosResponse<RespondCardsType>) => {\r\n            debugger\r\n            dispatch(cardsAC(res.data.cards))\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n}\r\nexport const addCardTC = (data: {}):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    cardsAPI.cardAdd(data)\r\n        .then((res: AxiosResponse<OnCardAddType>) => {\r\n            dispatch(getCardsTC(res.data.newCard.cardsPack_id));\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n}\r\nexport const deleteCardTC = (data: string):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    cardsAPI.cardDelete(data)\r\n        .then((res: AxiosResponse<any>) => {\r\n            dispatch(getCardsTC(res.data.deletedCard.cardsPack_id));\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n}\r\nexport const updateCardTC = (data: {}):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    cardsAPI.cardUpdate(data)\r\n        .then((res: AxiosResponse<UpdatedRespondDataCardType>) => {\r\n            dispatch(getCardsTC(res.data.updatedCard.cardsPack_id));\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {RespondCardType} from \"../../../i1-main/m3-dal/api\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Button, Input, Layout, Modal, Popconfirm, Space, Table} from \"antd\";\r\nimport {Content} from \"antd/es/layout/layout\";\r\nimport {addCardTC, currentPackIdAC, deleteCardTC, getCardsTC, updateCardTC} from \"./cards-reducer\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {ColumnsType} from \"antd/es/table\";\r\n\r\ninterface User {\r\n    question: string\r\n    answer: string\r\n    grade: number\r\n    lastUpdate: string\r\n    key: string\r\n}\r\n\r\n\r\nexport const Cards = () => {\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [question, setQuestion] = useState(\"\")\r\n    const [answer, setAnswer] = useState(\"\")\r\n\r\n    const state = useSelector<AppRootStateType, Array<RespondCardType>>(s => s.cards.cards)\r\n    const cardsPack_id = useSelector<AppRootStateType, string>(s => s.cards.cardsPack_id)\r\n    const dispatch = useDispatch()\r\n\r\n    const [isEditable, setIsEditable] = useState(false)\r\n    const [title, setTitle] = useState('')\r\n\r\n\r\n    const handleSetQuestion = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setQuestion(event.currentTarget.value)\r\n    }\r\n    const handleSetAnswer = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setAnswer(event.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const packId = state.find(cr=> cr.cardsPack_id )\r\n        if (packId) {\r\n        dispatch(getCardsTC(cardsPack_id))\r\n        }\r\n    }, [dispatch])\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n        dispatch(addCardTC({cardsPack_id, question, answer, }))\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    if (cardsPack_id === '') {\r\n        return <Redirect to={PATH.PACKS}/>\r\n    }\r\n\r\n    const handelTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const switchToEditable = () => {\r\n        setIsEditable(true)\r\n    }\r\n    const switchToUneditable = () => {\r\n        setIsEditable(false)\r\n    }\r\n    const thunkRequest = (key: React.Key) => {\r\n        dispatch(updateCardTC(key))\r\n    }\r\n    // const handleSave = (s: number) => {\r\n    //     // debugger\r\n    // }\r\n\r\n    const columns: ColumnsType<User> = [\r\n        {\r\n            title: 'Question',\r\n            dataIndex: 'question',\r\n            key: 'question',\r\n            width: '20px',\r\n            render: (text: string, record) => {\r\n                if (!isEditable) {\r\n                    return <div onDoubleClick={switchToEditable}>\r\n                        {text}\r\n                    </div>\r\n                } else\r\n                    return <div onBlur={switchToUneditable}>\r\n                        <input type=\"text\" value={title} onChange={handelTitleChange} onBlur={ () => thunkRequest(record.key)}/>\r\n                    </div>\r\n            },\r\n        },\r\n        {\r\n            title: 'Answer',\r\n            dataIndex: 'answer',\r\n            key: 'answer',\r\n            width: '20px',\r\n            render: (text: string) => <div>{text}</div>\r\n        },\r\n        //Оценка колоды\r\n        {\r\n            title: 'Grade',\r\n            dataIndex: 'grade',\r\n            key: 'grade',\r\n            sorter: {\r\n                compare: (a: any, b: any) => a.grade - b.grade,\r\n                multiple: 2\r\n            },\r\n            render: (grade: React.ReactNode) => (\r\n                <Space size=\"middle\">\r\n                    <div>{grade}</div>\r\n                </Space>\r\n            ),\r\n        },\r\n        //посл. обновлен.\r\n        {\r\n            title: 'Last Update',\r\n            dataIndex: 'lastUpdate',\r\n            key: 'lastUpdate',\r\n        },\r\n        //actions\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (_: any, record: { key: React.Key }) => (\r\n                <Space size=\"middle\">\r\n                    <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\r\n                        <a>Delete</a>\r\n                    </Popconfirm>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const handleDelete = (key: React.Key) => {\r\n        const packId = key.toString()\r\n        dispatch(deleteCardTC(packId))\r\n        dispatch(currentPackIdAC(packId))\r\n\r\n    };\r\n    const data: User[] = state.map((pack) => ({\r\n        question: pack.question,\r\n        answer: pack.answer,\r\n        grade: pack.grade,\r\n        lastUpdate: pack.updated.substr(0, 10).replace(/-/g, \" \"),\r\n        key: pack._id,\r\n    }))\r\n\r\n    return (\r\n        <>\r\n            <Layout>\r\n                <Button onClick={showModal}>Add Card</Button>\r\n                <Modal title=\"Add Card\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                    <span>Question: </span><Input value={question} onChange={handleSetQuestion}/>\r\n                    <span>Answer: </span><Input value={answer} onChange={handleSetAnswer}/>\r\n                </Modal>\r\n                <Content>\r\n                    <Table\r\n                        dataSource={data}\r\n                        columns={columns}\r\n                        bordered\r\n                        pagination={{\r\n                            position: ['topRight'],\r\n                            defaultPageSize: 10,\r\n                            pageSizeOptions: ['3', '5', '10', '20', '25']\r\n                        }}\r\n\r\n                    />\r\n                </Content>\r\n            </Layout>\r\n        </>\r\n    )\r\n}","import {\r\n    CardPacksType,\r\n    cardsAPI,\r\n    PacksResponseType,\r\n    RequestPackType\r\n} from \"../../../i1-main/m3-dal/api\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\n\r\nconst initialState = {\r\n    cardPacks: [] as Array<CardPacksType>,\r\n    cardsPack_id: '',\r\n    cardPacksTotalCount: 14,\r\n    maxCardsCount: 4,\r\n    minCardsCount: 0,\r\n    page: 1,\r\n    pageCount: 4\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype CARD_PACKS = ReturnType<typeof cardPacksAC>\r\ntype CURRENT_PACK = ReturnType<typeof currentPackIdAC>\r\n\r\ntype ActionsType = CARD_PACKS | CURRENT_PACK\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\n\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case getCardPacks:\r\n            return {...state, cardPacks: action.data}\r\n        case cardsPack_id:\r\n            return {...state, cardsPack_id: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getCardPacks = 'getCardPacks'\r\nconst cardsPack_id = 'cardsPack_id'\r\n\r\n//ac\r\nexport const cardPacksAC = (data: Array<CardPacksType>) => ({ type: getCardPacks, data } as const )\r\nexport const currentPackIdAC = (value: string) => ({ type: cardsPack_id, value } as const )\r\n//tc\r\nexport const getPacksTC = ():ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    cardsAPI.packs()\r\n        .then((res:AxiosResponse<PacksResponseType>) => {\r\n            dispatch(cardPacksAC(res.data.cardPacks))\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n}\r\n\r\nexport const addPackTC = (data: RequestPackType):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    cardsAPI.packsAdd(data)\r\n        .then((res: AxiosResponse) => {\r\n            dispatch(getPacksTC())\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n}\r\nexport const updatePack = (data: {_id: string, name: string}):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    cardsAPI.packUpdate(data)\r\n        .then( res => {\r\n            dispatch(getPacksTC());\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n}\r\nexport const deletePackTC = (id?: string):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    cardsAPI.packDelete(id)\r\n        .then( res => {\r\n            dispatch(getPacksTC())\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Button, Input, Layout, Modal, Popconfirm, Space, Table} from \"antd\";\r\nimport {ExclamationCircleOutlined} from '@ant-design/icons';\r\nimport 'antd/dist/antd.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Content} from \"antd/es/layout/layout\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport {ColumnsType} from \"antd/es/table\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {CardPacksType} from \"../../../i1-main/m3-dal/api\";\r\nimport {addPackTC, currentPackIdAC, deletePackTC, getPacksTC} from \"./packs-reducer\";\r\nimport {getCardsTC} from \"../t2-Cards/cards-reducer\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\n\r\n\r\ninterface User {\r\n    name: string\r\n    cardsCount: number\r\n    grade: number\r\n    lastUpdate: string\r\n    key: string\r\n}\r\n\r\nexport const Packs = () => {\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [packName, setPackName] = useState(\"\")\r\n\r\n    const state = useSelector<AppRootStateType, Array<CardPacksType>>(s => s.packs.cardPacks)\r\n    const currentId = useSelector<AppRootStateType, string>(s => s.packs.cardsPack_id)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getPacksTC())\r\n    }, [dispatch])\r\n\r\n\r\n    //добовление имя колоды в useState\r\n    const handleSetName = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPackName(event.currentTarget.value)\r\n    }\r\n\r\n    //Показать модальное окно\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    // При нажатии в модальном окне кнопки ок\r\n    const handleOk = () => {\r\n        // debugger\r\n        setIsModalVisible(false);\r\n        dispatch(addPackTC({name: packName}))\r\n    };\r\n    // закрытие модалки по кнопке cancel или X\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    // забирается id колоды\r\n    const myCallBack = (id: string) => {\r\n        dispatch(getCardsTC(id))\r\n        dispatch(currentPackIdAC(id))\r\n    }\r\n    // const editPackName = () => {\r\n    //     setIsModalVisible(false)\r\n    //     dispatch(updatePack({_id: currentId, name: packName}))\r\n    //     console.log(currentId, packName)\r\n    // }\r\n\r\n    //  для создания модалки\r\n    function confirm() {\r\n        Modal.confirm({\r\n            title: \"Confirm\",\r\n            content: 'Please confirm',\r\n            icon: <ExclamationCircleOutlined/>,\r\n            okText: \"Yes\",\r\n            okType: 'danger',\r\n            onOk() {\r\n                // debugger\r\n                dispatch(deletePackTC(currentId))\r\n            },\r\n            cancelText: \"No\",\r\n        })\r\n    }\r\n\r\n    const columns: ColumnsType<User> = [\r\n        //Название Колоды\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            width: '200px',\r\n            render: (value: React.ReactNode) => {\r\n                return <div>\r\n                    <NavLink to={PATH.CARDS}>{value}</NavLink>\r\n                </div>;\r\n            },\r\n        },\r\n        //Оценка колоды\r\n        {\r\n            title: 'Grade',\r\n            dataIndex: 'grade',\r\n            key: 'grade',\r\n            sorter: {\r\n                compare: (a, b) => a.grade - b.grade,\r\n                multiple: 2\r\n            },\r\n            render: (grade: React.ReactNode) => (\r\n                <Space size=\"middle\">\r\n                    <div>{grade}</div>\r\n                </Space>\r\n            ),\r\n        },\r\n        //колиество карт в колоде\r\n        {\r\n            title: 'Cards Count',\r\n            dataIndex: 'cardsCount',\r\n            key: 'cardsCount',\r\n            sorter: {\r\n                compare: (a, b) => a.cardsCount - b.cardsCount,\r\n                multiple: 1\r\n            },\r\n        },\r\n        //посл. обновлен.\r\n        {\r\n            title: 'Last Update',\r\n            dataIndex: 'lastUpdate',\r\n            key: 'lastUpdate',\r\n        },\r\n        //actions\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (s, record: { key: React.Key }) => (\r\n                <div>\r\n                    <Space size={'middle'}>\r\n                        <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\r\n                            <a>Delete</a>\r\n                        </Popconfirm>\r\n                        <NavLink to={PATH.LEARN} onClick={() => learnThisPack}>Learn</NavLink>\r\n                    </Space>\r\n\r\n                </div>\r\n\r\n            ),\r\n        },\r\n    ];\r\n    const handleDelete = (key: React.Key) => {\r\n        const packId = key.toString()\r\n        dispatch(deletePackTC(packId))\r\n        dispatch(currentPackIdAC(packId))\r\n    };\r\n\r\n    const learnThisPack = (key: React.Key) => {\r\n        const packId = key.toString()\r\n        dispatch(currentPackIdAC(packId))\r\n        dispatch(getCardsTC(packId))\r\n    }\r\n\r\n\r\n    const data: User[] = state.map((pack) => ({\r\n        name: pack.name,\r\n        cardsCount: pack.cardsCount,\r\n        lastUpdate: pack.updated.substr(0, 10).replace(/-/g, \" \"),\r\n        grade: pack.grade,\r\n        key: pack._id\r\n    }))\r\n\r\n    return (\r\n        <>\r\n            <Layout>\r\n                <Button onClick={showModal}>Add Pack</Button>\r\n                <Modal title=\"Add Pack\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                    <span>Pack name: </span><Input onChange={handleSetName}/>\r\n                </Modal>\r\n                <Content>\r\n                    <Table<User>\r\n                        rowKey=\"uid\"\r\n                        dataSource={data}\r\n                        columns={columns}\r\n                        onRow={(record) => {\r\n                            return {\r\n                                onClick: () => {\r\n                                    myCallBack(record.key)\r\n                                }, // click row\r\n                            };\r\n                        }}\r\n                        bordered\r\n                        pagination={{\r\n                            position: ['topRight'],\r\n                            defaultPageSize: 10,\r\n                            pageSizeOptions: ['3', '5', '10', '20', '25']\r\n                        }}\r\n                    />\r\n                </Content>\r\n            </Layout>\r\n        </>\r\n    )\r\n}","import {cardsAPI, LearnCardType, ThunkLearnPutType} from \"../../../i1-main/m3-dal/api\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {AxiosResponse} from \"axios\";\r\n\r\n\r\nconst initialState = {\r\n    card_id: '',\r\n    cardsPack_id: '',\r\n    created: '',\r\n    grade: 0,\r\n    more_id: '',\r\n    shots: 0,\r\n    updated: '',\r\n    user_id: '',\r\n    __v: 0,\r\n    _id: '',\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n//AC type\r\n\r\ntype CARD = ReturnType<typeof updateCardAC>\r\ntype ActionsType = CARD\r\n//TC type\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\n\r\nexport const learnReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case updatedCard:\r\n            return {\r\n                ...state,\r\n                card_id: action.data.card_id,\r\n                cardsPack_id: action.data.cardsPack_id,\r\n                created: action.data.created,\r\n                grade: action.data.grade,\r\n                more_id: action.data.more_id,\r\n                shots: action.data.shots,\r\n                updated: action.data.updated,\r\n                user_id: action.data.user_id,\r\n                __v: action.data.__v,\r\n                _id: action.data._id,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//const\r\nconst updatedCard = 'updatedCard'\r\n\r\n\r\n\r\n//ac\r\nexport const updateCardAC = (data: LearnCardType) => ({ type: updatedCard, data } as const )\r\n\r\n//tc\r\nexport const cardsEvaluation = (data: ThunkLearnPutType):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    cardsAPI.evaluationCard(data)\r\n        .then((res:AxiosResponse<LearnCardType>) => {\r\n            console.log('cool')\r\n            dispatch(updateCardAC(res.data))\r\n\r\n        })\r\n        .catch((err) => {\r\n            console.log('lox')\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Button, Divider, Layout, message} from \"antd\";\r\nimport {Content} from \"antd/es/layout/layout\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {getCardsTC} from \"../t2-Cards/cards-reducer\";\r\nimport 'antd/dist/antd.css';\r\nimport s from './Learn.module.css'\r\nimport {cardsEvaluation} from \"./learn-reducer\";\r\n\r\nexport type CardType = {\r\n    _id: string;\r\n    cardsPack_id: string;\r\n\r\n    answer: string;\r\n    question: string;\r\n    grade: number;\r\n    shots: number;\r\n\r\n    type: string;\r\n    rating: number;\r\n    // more_id: string;\r\n\r\n    created: string;\r\n    updated: string;\r\n}\r\n\r\nconst messages = [\r\n    'Не переживай ты всё равно красавчик',\r\n    'Да ты всё и так знаешь, просто гонишь',\r\n    'Ну ты красавчик',\r\n    'Самурай, лети на собес!',\r\n    'Ты стопудовый мидл не меньше!'\r\n]\r\n\r\n\r\nconst getCard = (cards: Array<CardType>) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n    console.log('test: ', sum, rand, res)\r\n\r\n    return cards[res.id + 1];\r\n}\r\n\r\n\r\nexport const Learn = () => {\r\n    const {cards} = useSelector((store: AppRootStateType) => store.cards);\r\n    // const {cards} = useSelector<AppRootStateType, CardType>(store => store.cards);\r\n    const cardsPack_id = useSelector<AppRootStateType, string>(s => s.cards.cardsPack_id)\r\n    const dispatch = useDispatch()\r\n\r\n    const [first, setFirst] = useState<boolean>(true);\r\n    const [check, setCheck] = useState(false)\r\n    const [isDisable, setIsDisable] = useState(true)\r\n    const [card, setCard] = useState<CardType>({\r\n        _id: 'fake',\r\n        cardsPack_id: '',\r\n\r\n        answer: '',\r\n        question: '',\r\n        grade: 0,\r\n        shots: 0,\r\n\r\n        type: '',\r\n        rating: 0,\r\n        // more_id: '',\r\n\r\n        created: '',\r\n        updated: '',\r\n    });\r\n\r\n    const myCallBack = useCallback((grade: number, card_id: string) => {\r\n        message.info(messages[grade - 1], 2)\r\n        dispatch(cardsEvaluation({grade, card_id}))\r\n        setIsDisable(false)\r\n\r\n    }, [setIsDisable, dispatch])\r\n\r\n    const checkButton = useCallback((check: boolean) => {\r\n        // debugger\r\n        setCheck(check)\r\n        if (cards.length > 0 && !check) {\r\n            // dispatch\r\n            setCard(getCard(cards));\r\n        }\r\n    }, [setCheck])\r\n\r\n\r\n    useEffect(() => {\r\n        if (first) {\r\n            dispatch(getCardsTC(cardsPack_id))\r\n            setFirst(false);\r\n        }\r\n\r\n        if (cards.length > 0) setCard(getCard(cards));\r\n        return () => {\r\n            console.log('LearnContainer useEffect off');\r\n        }\r\n    }, [dispatch, cards, first])\r\n\r\n\r\n    if (cardsPack_id === '') {\r\n        return <Redirect to={PATH.PACKS}/>\r\n    }\r\n\r\n\r\n    debugger\r\n\r\n    return (\r\n        <> {card &&\r\n        <Layout className={s.layout}>\r\n            <Content className={s.content}>\r\n                <div>\r\n                    <div className={s.question}>\r\n                        <div className={s.question}>{card.question}</div>\r\n                        <Button onClick={() => checkButton(true)}>CHECK</Button></div>\r\n                    {check &&\r\n                    <div>\r\n                        <Divider/>\r\n                        <div className={s.answer}>{card.answer}</div>\r\n                        <div className={s.buttons}>\r\n                            <div className={s.button}>\r\n                                <Button onClick={() => myCallBack(1, card._id)}>I do not know it</Button>\r\n                            </div>\r\n                            <div className={s.button}>\r\n                                <Button onClick={() => myCallBack(2, card._id)}>I am not sure</Button>\r\n                            </div>\r\n                            <div className={s.button}>\r\n                                <Button onClick={() => myCallBack(3, card._id)}>I feel I knew it</Button>\r\n                            </div>\r\n                            <div className={s.button}>\r\n                                <Button onClick={() => myCallBack(4, card._id)}>I know it</Button>\r\n                            </div>\r\n                            <div className={s.button}>\r\n                                <Button onClick={() => myCallBack(5, card._id)}>I know well</Button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={s.nextButton}>\r\n                            <Button disabled={isDisable} onClick={() => checkButton(false)}>NEXT</Button>\r\n                        </div>\r\n                        <Divider/>\r\n                    </div>\r\n                    }\r\n                </div>\r\n            </Content>\r\n        </Layout>\r\n        }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport Error404 from \"../u4-components/co2-Error404/Error404\";\r\nimport {Login} from \"../../../i2-features/f1-Auth/f1-Login/Login\";\r\nimport {Registration} from \"../../../i2-features/f1-Auth/f3-Registration/Registration\";\r\nimport {Profile} from \"../u4-components/co1-Profile/Profile\";\r\nimport {Recovery} from \"../../../i2-features/f1-Auth/f2-Recovery/Recovery\";\r\nimport {CreateNewPassword} from \"../../../i2-features/f1-Auth/f2-Recovery/CreateNewPassword\";\r\nimport {Logout} from \"../../../i2-features/f1-Auth/f1-Login/Logout\";\r\nimport {Cards} from \"../../../i2-features/f2-Table/t2-Cards/Cards\";\r\nimport {Packs} from \"../../../i2-features/f2-Table/t1-Packs/Packs\";\r\nimport {Learn} from \"../../../i2-features/f2-Table/t3-Learn/Learn\";\r\n\r\n\r\nexport const PATH = {\r\n    LOGIN: \"/login\",\r\n    REGISTRATION: '/registration',\r\n    PROFILE: '/profile',\r\n    RECOVERY: '/recovery',\r\n    CREATE_NEW_PASSWORD: '/create_new_password',\r\n    LOGOUT: '/logout',\r\n    PACKS: '/packs',\r\n    CARDS: '/cards',\r\n    LEARN: '/learn'\r\n\r\n\r\n\r\n    // add paths\r\n}\r\n\r\nfunction Routes() {\r\n    return (\r\n        <div>\r\n            {/*Switch выбирает первый подходящий роут*/}\r\n            <Switch>\r\n                 {/*в начале мы попадаем  на страницу \"/\" и переходим сразу на страницу PRE_JUNIOR*/}\r\n                {/*exact нужен чтоб указать полное совподение (что после \"/\" ничего не будет)*/}\r\n                {/*<Route path={\"/\"} exact render={() => <Redirect to={PATH.PROFILE}/>}/>*/}\r\n                <Route path={\"/\"} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.REGISTRATION} render={() => <Registration/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                {/*<Route path={PATH.RECOVERY} render={() => <Recovery/>}/>*/}\r\n                <Route path={`${PATH.CREATE_NEW_PASSWORD}/:resetPasswordToken`}  render={() => <CreateNewPassword/>}/>\r\n                <Route path={PATH.RECOVERY} exact render={() => <Recovery/>}/>\r\n                <Route path={PATH.LOGOUT} render={() => <Logout/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n\r\n                <Route path={`${PATH.CARDS}/:packToken`} render={() => <Cards/>}/>\r\n                <Route path={`${PATH.CARDS}`} exact render={() => <Cards/>}/>\r\n                <Route path={`${PATH.LEARN}`} exact render={() => <Learn/>}/>\r\n\r\n\r\n\r\n                <Route path={'/404'} render={() => <Error404/>}/>\r\n                <Redirect from={'*'} to={'/404'}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../u3-routes/Routes\";\r\nimport s from './Header.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\n\r\nfunction Header() {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n\r\n    return (\r\n        <div className={s.background}>\r\n            {!isLoggedIn ?\r\n                <div className={s.nav_links}>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active} to={PATH.LOGIN}>Login</NavLink>\r\n                    </div>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active}\r\n                                 to={PATH.REGISTRATION}>Registration</NavLink>\r\n                    </div>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active} to={PATH.RECOVERY}>Forgot\r\n                            Password?</NavLink>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className={s.nav_links}>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active} to={PATH.PROFILE}>Profile</NavLink>\r\n                    </div>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active} to={PATH.PACKS}>Packs</NavLink>\r\n                    </div>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active} to={PATH.LOGOUT}>Logout</NavLink>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport './App.css';\nimport Header from \"./u2-header/Header\";\nimport Routes from \"./u3-routes/Routes\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <HashRouter >\n        <Header/>\n        <Routes/>\n      </HashRouter>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","type InitialStateType = {}\r\n\r\nconst initialState: InitialStateType = {\r\n    testObj: {}\r\n}\r\n\r\nexport const testReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case firstCase:\r\n            return {...state}\r\n        default:\r\n            return {...state}\r\n    }\r\n\r\n}\r\n\r\nconst firstCase = ''","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {testReducer} from \"./test-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {recoveryReducer} from \"./recovery-reducer\";\r\nimport thunk from 'redux-thunk';\r\nimport {packsReducer} from \"../../i2-features/f2-Table/t1-Packs/packs-reducer\";\r\nimport {cardsReducer} from \"../../i2-features/f2-Table/t2-Cards/cards-reducer\";\r\nimport {learnReducer} from \"../../i2-features/f2-Table/t3-Learn/learn-reducer\";\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    test: testReducer,\r\n    isLoggedIn: authReducer,\r\n    profile: profileReducer,\r\n    isRegistered: registrationReducer,\r\n    recovery: recoveryReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    learn: learnReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './i1-main/m1-ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './i1-main/m2-bll/store';\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Header_background__3d8e3\",\"nav_links\":\"Header_nav_links__2fY8Y\",\"nav_container\":\"Header_nav_container__20c2T\",\"title_nav\":\"Header_title_nav__3-n7c\",\"active\":\"Header_active__35kSX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"site-layout-content\":\"Learn_site-layout-content__2BC6M\",\"components-layout-demo-top\":\"Learn_components-layout-demo-top__14vX7\",\"logo\":\"Learn_logo__3Vw2g\",\"ant-row-rtl\":\"Learn_ant-row-rtl__s01-6\",\"content\":\"Learn_content__diOPh\",\"question\":\"Learn_question__1s5sJ\",\"layout\":\"Learn_layout__22IdH\",\"buttons\":\"Learn_buttons__gdf5j\",\"button\":\"Learn_button__zD3xK\",\"nextButton\":\"Learn_nextButton__30IV7\",\"answer\":\"Learn_answer__3HpdM\"};"],"sourceRoot":""}
{"version":3,"sources":["i1-main/m1-ui/u4-components/co2-Error404/Error404.module.css","i2-features/f1-Auth/f1-Login/Login.module.css","i2-features/f1-Auth/f3-Registration/Registration.module.css","i2-features/f1-Auth/f2-Recovery/Recovery.module.css","i2-features/f1-Auth/f2-Recovery/CreateNewPassword.module.css","i1-main/m1-ui/u1-common/c1-assets/images/girl-dancer.gif","i1-main/m1-ui/u4-components/co2-Error404/Error404.tsx","i1-main/m3-dal/api.ts","i1-main/m2-bll/profile-reducer.ts","i1-main/m2-bll/auth-reducer.ts","i2-features/f1-Auth/f1-Login/Login.tsx","i1-main/m2-bll/registration-reducer.ts","i2-features/f1-Auth/f3-Registration/Registration.tsx","i1-main/m1-ui/u1-common/c1-assets/images/smile.png","i1-main/m1-ui/u4-components/co1-Profile/Profile.tsx","i1-main/m2-bll/recovery-reducer.ts","i2-features/f1-Auth/f2-Recovery/Recovery.tsx","i2-features/f1-Auth/f2-Recovery/CreateNewPassword.tsx","i2-features/f1-Auth/f1-Login/Logout.tsx","i2-features/f2-Table/t2-Cards/cards-reducer.ts","i2-features/f2-Table/t2-Cards/Cards.tsx","i2-features/f2-Table/t1-Packs/packs-reducer.ts","i2-features/f2-Table/t1-Packs/Packs.tsx","i2-features/f2-Table/t3-Learn/learn-reducer.ts","i2-features/f2-Table/t3-Learn/Learn.tsx","i1-main/m1-ui/u1-redirect/RedirectComponent.tsx","i1-main/m1-ui/u3-routes/Routes.tsx","i1-main/m1-ui/u2-header/Header.tsx","i1-main/m1-ui/App.tsx","reportWebVitals.ts","i1-main/m2-bll/store.ts","index.tsx","i1-main/m1-ui/u2-header/Header.module.css","i2-features/f2-Table/t3-Learn/Learn.module.css","i1-main/m1-ui/u4-components/co1-Profile/Profile.module.css"],"names":["module","exports","Error404","className","s","error404","error404_text","girl","src","alt","instance","axios","create","baseURL","withCredentials","authAPI","data","post","delete","cardsAPI","get","cardsPack","id","put","card","initialState","_id","email","name","publicCardPacksCount","created","Date","updated","isAdmin","verified","rememberMe","profileAC","avatar","error","type","profileChanged","login","password","isLoggedIn","emailChanged","passwordChanged","rememberMeChanged","onSubmit","onError","onLogout","onSubmitAC","value","onErrorAC","Login","dispatch","useDispatch","useSelector","to","PATH","PROFILE","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","passwordChangedAC","rememberMeChangedAC","then","res","catch","err","response","message","Item","label","rules","required","Password","offset","valuePropName","htmlType","CHANGE_EMAIL","CHANGE_PASSWORD","IS_REGISTRATION","isRegistered","createUserTC","dataRegistration","Registration","state","LOGIN","registration","Profile","profile","profileContainer","profilePic","info","text","isDone","recoveryInfo","setNewPasswordInfo","isNewPasswordSet","SUCCESSFUL","RESPONSE_RECOVERY_INFO","RESPONSE_SET_NEW_PASSWORD_INFO","SET_NEW_PASSWORD","successful","recoveryPassword","success","setNewPasswordTC","Recovery","recovery","useState","CREATE_NEW_PASSWORD","from","CreateNewPassword","resetPasswordToken","useParams","console","log","createNewPassword","Logout","useEffect","cards","cardsTotalCount","maxGrade","Infinity","minGrade","page","pageCount","packUserId","cardsPack_id","isLoading","getCards","cardsLoaderIsOn","cardsLoaderAC","getCardsTC","cardsAC","finally","Cards","isModalVisible","setIsModalVisible","question","setQuestion","answer","setAnswer","PACKS","columns","title","dataIndex","key","width","render","sorter","compare","a","b","grade","multiple","size","_","record","onConfirm","handleDelete","packId","toString","deletedCard","deleteCardTC","map","pack","lastUpdate","substr","replace","spinning","onClick","visible","onOk","newCard","addCardTC","trim","warn","onCancel","onChange","event","currentTarget","dataSource","pagination","position","defaultPageSize","pageSizeOptions","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","getCardPacks","packsLoaderIsOn","currentPackIdAC","packsLoaderAC","getPacksTC","Packs","packName","setPackName","first","setFirst","updateModalVisible","setUpdateModalVisible","updatePackName","setUpdatePackName","packs","currentId","CARDS","creator","cardsCount","LEARN","rel","deletedCardsPack","user_name","newCardsPack","addPackTC","updatedCardsPack","updatePack","onRow","card_id","more_id","shots","user_id","__v","updatedCard","cardsEvaluation","updateCardAC","messages","getCard","sum","reduce","acc","rand","Math","random","i","newSum","Learn","store","check","setCheck","isDisable","setIsDisable","isDisabledButton","setIsDisabledButton","rating","setCard","myCallBack","useCallback","checkButton","length","layout","content","disabled","buttons","button","nextButton","AuthRedirectPage","React","memo","children","restProps","user","firstRendering","setFirstRendering","redirect","setRedirect","spin","setSpin","setTimeout","REGISTRATION","RECOVERY","LOGOUT","Routes","path","exact","Header","background","nav_links","nav_container","title_nav","activeClassName","active","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","learn","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0e3b5cb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error404\":\"Error404_error404__1ry36\",\"error404_text\":\"Error404_error404_text__2VILg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2iPmy\",\"loginForm\":\"Login_loginForm__AYLAX\",\"title\":\"Login_title__Nx4Wo\",\"message\":\"Login_message__3XIc9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registration\":\"Registration_registration__Gz9l-\",\"registrationInner\":\"Registration_registrationInner__1ikOA\",\"title\":\"Registration_title__3nqo_\",\"message\":\"Registration_message__3rORD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recovery\":\"Recovery_recovery__7ban8\",\"title\":\"Recovery_title__3U_nk\",\"button\":\"Recovery_button__3WSC1\",\"message\":\"Recovery_message__10zGr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createNewPassword\":\"CreateNewPassword_createNewPassword__14jYR\",\"button\":\"CreateNewPassword_button__1zOYG\"};","export default __webpack_public_path__ + \"static/media/girl-dancer.cfef6556.gif\";","import React from \"react\";\r\nimport s from './Error404.module.css'\r\nimport girl from '../../u1-common/c1-assets/images/girl-dancer.gif'\r\n\r\nfunction Error404() {\r\n    return (\r\n        <div className={s.error404}>\r\n            <div className={s.error404_text}>404\r\n            Page not found!</div><br/>\r\n            <div className={s.girl}><img src={girl} alt=\"\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error404;\r\n","import axios from \"axios\";\r\nimport {AxiosResponseType, LoginType} from \"../m2-bll/auth-reducer\";\r\n\r\n\r\n//'https://neko-back.herokuapp.com/2.0/'\r\n//\"http://localhost:7542/2.0/\"\r\n\r\n// 'valentyn.333k@gmail.com'\r\n// '111qwe222'\r\nconst instance  = axios.create ({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true,\r\n})\r\n\r\nexport type RequestRecoveryType = {\r\n    email: string,\r\n    from?: string,\r\n    message?: string\r\n}\r\n\r\ntype RecoveryResponseType = {\r\n    info: any\r\n    status: number\r\n    statusText: string\r\n    error?: string\r\n}\r\nexport type RequestType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\nexport type ResponseType = {\r\n    data: any\r\n    status: number\r\n    statusText: string\r\n    error?: string\r\n}\r\nexport type SetNewPasswordRequestType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\nexport type SetNewPasswordResponseType = {\r\n    info: string\r\n    error: string;\r\n}\r\n\r\nexport type CardPacksType = {\r\n    _id: string,\r\n    user_id: string,\r\n    user_name: string,\r\n    private: boolean,\r\n    name: string,\r\n    path: string,\r\n    grade: number,\r\n    shots: number,\r\n    cardsCount: number,\r\n    type: string,\r\n    rating: number,\r\n    created: string,\r\n    updated: string,\r\n    more_id: string,\r\n    __v: number\r\n}\r\n\r\nexport type PacksResponseType = {\r\n    cardPacks: Array<CardPacksType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type RequestPackType = {\r\n    name?: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    deckCover?: string\r\n    private?: boolean\r\n    type?: string\r\n}\r\n\r\nexport type RespondCardsType = {\r\n    cards: Array<RespondCardType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n    more_id: string\r\n\r\n}\r\n\r\nexport type RespondCardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n    more_id: string\r\n}\r\n\r\nexport type UpdatedRespondCardType = {\r\n    answer: string\r\n    answerImg: string\r\n    answerVideo: string\r\n    cardsPack_id: string\r\n    comments: string\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    question: string\r\n    questionImg: string\r\n    questionVideo: string\r\n    rating: number\r\n    shots: number\r\n    type: \"card\"\r\n    updated: string\r\n    user_id: string\r\n    __v: number\r\n    _id: string\r\n}\r\nexport type UpdatedRespondDataCardType = {\r\n    token: string\r\n    tokenDeathTime: number\r\n    updatedCard: UpdatedRespondCardType\r\n}\r\n\r\nexport type RequestCardType = {\r\n    cardsPack_id: string\r\n}\r\nexport type NewCardType = {\r\n    answer: string\r\n    cardsPack_id: string\r\n    comments: string\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    question: string\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    __v: number\r\n    _id: string\r\n}\r\nexport type OnCardAddType = {\r\n    newCard: NewCardType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type ThunkLearnPutType = {\r\n    grade: number,\r\n    card_id: string\r\n}\r\n\r\nexport type LearnCardType = {\r\n    card_id: string\r\n    cardsPack_id: string\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    shots: number\r\n    updated: string\r\n    user_id: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport const authAPI = {\r\n    recoverPassword(data: RequestRecoveryType) {\r\n        return  instance.post<RecoveryResponseType>('auth/forgot', data)\r\n    },\r\n    login(data: LoginType) {\r\n        return instance.post<AxiosResponseType>('auth/login', data)\r\n    },\r\n    setNewPassword(data: SetNewPasswordRequestType) {\r\n        return instance.post<SetNewPasswordResponseType>('auth/set-new-password', data)\r\n    },\r\n    signUp(data: RequestType) {\r\n        return instance.post<ResponseType>('auth/register', data)\r\n    },\r\n    authMe() {\r\n      return instance.post(`/auth/me`, {})\r\n    },\r\n    ping() {\r\n        return instance.get('ping')\r\n    },\r\n    logout() {\r\n        return instance.delete(`/auth/me`, {})\r\n    }\r\n}\r\n\r\nexport const cardsAPI = {\r\n    packs() {\r\n        return instance.get(`cards/pack?pageCount=100`)\r\n        //?packName=english // не обязательно\r\n        // &min=3 // не обязательно\r\n        // &max=9 // не обязательно\r\n        // &sortPacks=0updated // не обязательно\r\n        // &page=1 // не обязательно\r\n        // &pageCount=4 // не обязательно\r\n    },\r\n    packsAdd(data: RequestPackType) {\r\n        return instance.post(`cards/pack`, {cardsPack: data})\r\n    },\r\n    packDelete(id?: string) {\r\n        return instance.delete(`cards/pack?id=${id}`)\r\n    },\r\n    packUpdate(data: {_id: string, name?: string}) {\r\n        return instance.put(`cards/pack`, {cardsPack: data})\r\n    },\r\n\r\n    cards(data: string) {\r\n        return instance.get(`cards/card/?cardsPack_id=${data}&pageCount=20`)\r\n    },\r\n    cardAdd(data: {}) {\r\n        return instance.post(`cards/card/`, {card: data})\r\n    },\r\n    cardDelete(data: string) {\r\n        return instance.delete(`cards/card?id=${data}`)\r\n    },\r\n    evaluationCard(data: {}) {\r\n        return instance.put('cards/grade', data)\r\n    }\r\n}","import {AxiosResponseType} from \"./auth-reducer\";\r\n\r\nconst initialState: AxiosResponseType = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    publicCardPacksCount: 0,\r\n    created: new Date(),\r\n    updated: new Date(),\r\n    isAdmin: false,\r\n    verified: false,\r\n    rememberMe: false,\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\ntype PROFILE = ReturnType<typeof profileAC>\r\n\r\n\r\ntype ActionsType = PROFILE\r\n\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case profileChanged:\r\n            return {\r\n                ...state,\r\n                _id: action._id,\r\n                email: action.email,\r\n                name: action.name,\r\n                publicCardPacksCount: action.publicCardPacksCount,\r\n                created: action.created,\r\n                updated: action.updated,\r\n                isAdmin: action.isAdmin,\r\n                verified: action.verified,\r\n                rememberMe: action.rememberMe,\r\n                avatar: action.avatar,\r\n                error: action.error,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const profileAC = (\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    publicCardPacksCount: number, // количество колод\r\n    created: Date,\r\n    updated: Date,\r\n    isAdmin: boolean,\r\n    verified: boolean, // подтвердил ли почту\r\n    rememberMe: boolean,\r\n    avatar: string | undefined,\r\n    error: string | undefined,\r\n) => ({type: profileChanged, _id, email, name, avatar, publicCardPacksCount, created,\r\n    updated, isAdmin, verified, rememberMe, error} as const)\r\n\r\n\r\nconst profileChanged = 'profileChanged'\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../m3-dal/api\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {profileAC} from \"./profile-reducer\";\r\nimport {message} from \"antd\";\r\n\r\n\r\ntype EMAIL_CHANGED = ReturnType<typeof emailChangedAC>\r\ntype PASSWORD_CHANGED = ReturnType<typeof passwordChangedAC>\r\ntype ON_SUBMIT = ReturnType<typeof onSubmitAC>\r\ntype REMEMBER_ME = ReturnType<typeof rememberMeChangedAC>\r\nexport type ON_ERROR = ReturnType<typeof onErrorAC>\r\nexport type ON_LOGOUT = ReturnType<typeof onLogoutAC>\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\n\r\nexport type LoginType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n}\r\n\r\nexport type AxiosResponseType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n\r\n    error?: string;\r\n}\r\n\r\nconst initialState = {\r\n    login: '',\r\n    password: '',\r\n    rememberMe: false,\r\n    isLoggedIn: false,\r\n    error: '',\r\n}\r\n\r\n\r\ntype ActionsType = EMAIL_CHANGED | PASSWORD_CHANGED | ON_SUBMIT | REMEMBER_ME | ON_ERROR\r\n | ON_LOGOUT\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case emailChanged:\r\n            return {...state, login: action.value}\r\n        case passwordChanged:\r\n            return {...state, password: action.value}\r\n        case rememberMeChanged:\r\n            return {...state, rememberMe: action.value}\r\n        case onSubmit:\r\n            return {...state, isLoggedIn: action.value}\r\n        case onLogout:\r\n            return {...state, isLoggedIn: action.value}\r\n        case onError:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst emailChanged = 'emailChanged'\r\nconst passwordChanged = 'passwordChanged'\r\nconst rememberMeChanged = 'rememberMeChanged'\r\nconst onSubmit = 'onSubmit'\r\nexport const onError = 'onError'\r\nexport const onLogout = 'onLogout'\r\n\r\nexport const emailChangedAC = (value: string) => ({type: emailChanged, value} as const)\r\nexport const passwordChangedAC = (value: string) => ({type: passwordChanged, value} as const)\r\nexport const rememberMeChangedAC = (value: boolean) => ({type: rememberMeChanged, value} as const)\r\nexport const onSubmitAC = () => ({type: onSubmit, value: true} as const)\r\nexport const onLogoutAC = () => ({type: onLogout, value: false} as const)\r\nexport const onErrorAC  = (error: string) => ({type: onError, error} as const)\r\n\r\nexport const onSubmitTC = (data: LoginType) => (dispatch: Dispatch) => {\r\n    authAPI.login(data)\r\n        .then((res: AxiosResponse<AxiosResponseType>) => {\r\n            dispatch(onSubmitAC())\r\n            dispatch(profileAC(res.data._id, res.data.email, res.data.name, res.data.publicCardPacksCount, res.data.created,\r\n                res.data.updated, res.data.isAdmin, res.data.verified, res.data.rememberMe, res.data.avatar, res.data.error))\r\n        })\r\n\r\n        .catch((err) => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\n\r\nexport const authMe = () => (dispatch: Dispatch) => {\r\n    authAPI.authMe()\r\n        .then( (res) => {\r\n            dispatch(onSubmitAC())\r\n            dispatch(profileAC(res.data._id, res.data.email, res.data.name, res.data.publicCardPacksCount, res.data.created,\r\n                res.data.updated, res.data.isAdmin, res.data.verified, res.data.rememberMe, res.data.avatar, res.data.error))\r\n        })\r\n        .catch((err) => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    authAPI.logout()\r\n        .then( () => {\r\n            message.info(`You've been logged out`)\r\n        })\r\n        .catch((err) => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\n\r\n\r\n\r\n","import React, {FC} from \"react\";\r\nimport s from \"./Login.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {\r\n    emailChangedAC,\r\n    InitialStateType,\r\n    onSubmitTC,\r\n    passwordChangedAC,\r\n    rememberMeChangedAC\r\n} from \"../../../i1-main/m2-bll/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {Form, Input, Button, Checkbox, message} from 'antd';\r\n\r\n\r\nexport const Login: FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const state = useSelector<AppRootStateType, InitialStateType>(s => s.isLoggedIn)\r\n\r\n\r\n    type ValuesType= {\r\n        password: string\r\n        email: string\r\n        rememberMe: boolean\r\n    }\r\n\r\n    const onFinish = (values: ValuesType) => {\r\n        dispatch(emailChangedAC(values.email))\r\n        dispatch(passwordChangedAC(values.password))\r\n        dispatch(rememberMeChangedAC(values.rememberMe))\r\n        dispatch(onSubmitTC({email: values.email, password: values.password, rememberMe: values.rememberMe}))\r\n    };\r\n\r\n    if (state.isLoggedIn) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.login}>\r\n            <Form\r\n                { ...{labelCol: { span: 8 }, wrapperCol: { span: 16 } }}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    rules={[{ required: true, message: 'Please input your email!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[{ required: true, message: 'Please input your password!' }]}\r\n                >\r\n                    <Input.Password />\r\n                </Form.Item>\r\n\r\n                <Form.Item { ...{wrapperCol: { offset: 8, span: 16 }}} name=\"rememberMe\" valuePropName=\"checked\">\r\n                    <Checkbox>Remember me</Checkbox>\r\n                </Form.Item>\r\n\r\n                <Form.Item {...{wrapperCol: { offset: 8, span: 16 }}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, RequestType} from \"../m3-dal/api\";\r\nimport {ON_ERROR, onError, onErrorAC} from \"./auth-reducer\";\r\nimport {message} from \"antd\";\r\n\r\nconst CHANGE_EMAIL = 'CHANGE_EMAIL',\r\n    CHANGE_PASSWORD = 'CHANGE_PASSWORD',\r\n    IS_REGISTRATION = 'IS_REGISTRATION'\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n    email: '',\r\n    password: '',\r\n    error: ''\r\n}\r\nexport type InitialStateRegistrationType = typeof initialState\r\n\r\ntype ChangeEmailAT = ReturnType<typeof changeEmail>\r\ntype ChangePasswordAT = ReturnType<typeof changePassword>\r\ntype CheckRegistrationAT = ReturnType<typeof checkRegistration>\r\n\r\n\r\ntype ActionType =\r\n    | ChangeEmailAT\r\n    | ChangePasswordAT\r\n    | CheckRegistrationAT\r\n    | ON_ERROR\r\n\r\n\r\nexport const registrationReducer = (state: InitialStateRegistrationType = initialState, action: ActionType): InitialStateRegistrationType => {\r\n    switch (action.type) {\r\n        case CHANGE_EMAIL:\r\n            return {...state, email: action.value}\r\n        case CHANGE_PASSWORD:\r\n            return {...state, password: action.value}\r\n        case IS_REGISTRATION:\r\n            return {...state, isRegistered: action.isRegistered}\r\n        case onError:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//ac\r\nexport const changeEmail = (value: string) => ({type: CHANGE_EMAIL, value} as const)\r\nexport const changePassword = (value: string) => ({type: CHANGE_PASSWORD, value} as const)\r\nconst checkRegistration = (isRegistered: boolean) => ({type: IS_REGISTRATION, isRegistered} as const)\r\n\r\n//tc\r\nexport const createUserTC = (dataRegistration: RequestType) => (dispatch: Dispatch) => {\r\n    authAPI.signUp({email: dataRegistration.email, password: dataRegistration.password})\r\n        .then((res) => {\r\n            dispatch(checkRegistration(true))\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./Registration.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {createUserTC, InitialStateRegistrationType} from \"../../../i1-main/m2-bll/registration-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {Button, Form, Input} from \"antd\";\r\n\r\n\r\nexport const Registration = () => {\r\n    const state = useSelector<AppRootStateType, InitialStateRegistrationType>(state=>state.isRegistered)\r\n    const  dispatch = useDispatch()\r\n\r\n    type ValuesType= {\r\n        password: string\r\n        email: string\r\n    }\r\n    const onFinish = (values: ValuesType) => {\r\n        dispatch(createUserTC({email: values.email, password: values.password}))\r\n    };\r\n    if (state.isRegistered) {\r\n       return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n    return (\r\n        <div className={s.registration}>\r\n            <Form\r\n                { ...{labelCol: { span: 8 }, wrapperCol: { span: 16 } }}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    rules={[{ required: true, message: 'Please input your email!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[{ required: true, message: 'Please input your password!' }]}\r\n                >\r\n                    <Input.Password />\r\n                </Form.Item>\r\n                <Form.Item {...{wrapperCol: { offset: 8, span: 16 }}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/smile.4174af4e.png\";","import React from \"react\";\r\nimport s from \"./Profile.module.css\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {AxiosResponseType} from \"../../../m2-bll/auth-reducer\";\r\nimport profilePic from \"../../u1-common/c1-assets/images/smile.png\"\r\n\r\n\r\nexport const Profile = () => {\r\n\r\n    const profile = useSelector<AppRootStateType, AxiosResponseType>(s => s.profile)\r\n\r\n    return (\r\n        <div className={s.profileContainer}>\r\n            <div className={s.profile}>\r\n                <div className={s.avatar}><img src={profile.avatar ?? profilePic} alt=\"avatar\"/></div>\r\n                <div className={s.info}>\r\n                    <div className={s.name}>{profile.name}</div>\r\n                    <div className={s.text}>{`Tha amount of public cards you created is ${profile.publicCardPacksCount}`}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, RequestRecoveryType, SetNewPasswordRequestType} from \"../m3-dal/api\";\r\nimport {onErrorAC} from \"./auth-reducer\";\r\nimport {message} from \"antd\";\r\n\r\ntype RecoveryStateType = typeof initialState\r\ntype SuccessfulActionType = ReturnType<typeof successful>\r\ntype ResponseRecoveryActionType = ReturnType<typeof responseRecoveryInfo>\r\ntype ResponseSetNewPasswordActionType = ReturnType<typeof responseSetNewPasswordInfo>\r\ntype SetNewPasswordActionType = ReturnType<typeof setNewPassword>\r\n\r\ntype ActionType = SuccessfulActionType | ResponseRecoveryActionType | ResponseSetNewPasswordActionType\r\n    | SetNewPasswordActionType\r\n\r\nconst initialState = {\r\n    isDone: true,\r\n    recoveryInfo: \"\",\r\n    setNewPasswordInfo: \"\",\r\n    isNewPasswordSet: false\r\n}\r\n\r\nconst SUCCESSFUL = 'SUCCESSFUL'\r\nconst RESPONSE_RECOVERY_INFO = 'RESPONSE_RECOVERY_INFO'\r\nconst RESPONSE_SET_NEW_PASSWORD_INFO = 'RESPONSE_SET_NEW_PASSWORD_INFO'\r\nconst SET_NEW_PASSWORD = 'SET_NEW_PASSWORD'\r\n\r\n\r\nexport const recoveryReducer = (state: RecoveryStateType = initialState, action: ActionType): RecoveryStateType => {\r\n    switch (action.type) {\r\n        case SUCCESSFUL:\r\n            return {...state, isDone: action.value}\r\n        case RESPONSE_RECOVERY_INFO:\r\n            return {...state, recoveryInfo: action.info}\r\n        case RESPONSE_SET_NEW_PASSWORD_INFO:\r\n            return {...state, setNewPasswordInfo: action.info}\r\n        case SET_NEW_PASSWORD:\r\n            return {...state, isNewPasswordSet: true}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const successful = (value: boolean) => ({type: SUCCESSFUL, value} as const)\r\nexport const responseRecoveryInfo = (info: string) => ({type: RESPONSE_RECOVERY_INFO, info} as const)\r\nexport const responseSetNewPasswordInfo = (info: string) => ({type: RESPONSE_SET_NEW_PASSWORD_INFO, info} as const)\r\nexport const setNewPassword = () => ({type: SET_NEW_PASSWORD} as const)\r\n\r\nexport const recoveryPassword = (data: RequestRecoveryType) => (dispatch: Dispatch) => {\r\n    authAPI.recoverPassword(data)\r\n        .then((res) => {\r\n            dispatch(successful(true))\r\n            dispatch(responseRecoveryInfo(res.data.info))\r\n            message.success(\"All ok\")\r\n        })\r\n\r\n        .catch((err) => {\r\n            dispatch(successful(false))\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\n\r\nexport const setNewPasswordTC = (data: SetNewPasswordRequestType) => (dispatch: Dispatch) => {\r\n    authAPI.setNewPassword(data)\r\n        .then((res) => {\r\n            dispatch(successful(true))\r\n            dispatch(setNewPassword())\r\n            dispatch(responseSetNewPasswordInfo(res.data.info))\r\n            message.success(\"All ok\")\r\n        })\r\n\r\n        .catch((err) => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            dispatch(onErrorAC(error))\r\n            message.error(error)\r\n        })\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./Recovery.module.css\";\r\nimport SuperInputText from \"../../../i1-main/m1-ui/u4-components/SuperComponents/rc1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../../i1-main/m1-ui/u4-components/SuperComponents/rc2-SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {recoveryPassword, successful} from \"../../../i1-main/m2-bll/recovery-reducer\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {Button, Form, Input} from \"antd\";\r\nimport {createUserTC} from \"../../../i1-main/m2-bll/registration-reducer\";\r\n\r\nexport const Recovery = () => {\r\n\r\n    const isDone = useSelector<AppRootStateType, boolean | null>( state => state.recovery.isDone)\r\n    const error = useSelector<AppRootStateType, string>(state=>state.isLoggedIn.error)\r\n    const dispatch  = useDispatch()\r\n\r\n    const [email, setEmail] = useState(\"valentyn.333k@gmail.com\")\r\n    const from = \"neko.nyakus.cafe@gmail.com\"\r\n    let message = `<div>password recovery link: <a href='https://valentyn-999.github.io/cards-fr#/create_new_password/$token$'>link</a></div>`\r\n\r\n\r\n    // const changeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n    //     dispatch(successful(false))\r\n    //     setEmail(event.currentTarget.value)\r\n    // }\r\n    //\r\n    // const sendEmail = () => {\r\n    //     debugger\r\n    //     dispatch(recoveryPassword({email, from, message}))\r\n    // }\r\n    type ValuesType = {\r\n        email: string\r\n    }\r\n    const onFinish = (values: ValuesType) => {\r\n        dispatch(successful(false))\r\n        dispatch(recoveryPassword({email: values.email,from, message}))\r\n    };\r\n    if (isDone) {\r\n        return <Redirect to={PATH.CREATE_NEW_PASSWORD}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.recovery}>\r\n            <Form\r\n                { ...{labelCol: { span: 8 }, wrapperCol: { span: 16 } }}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    rules={[{ required: true, message: 'Please input your email!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item {...{wrapperCol: { offset: 8, span: 16 }}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState} from \"react\";\r\nimport s from \"./CreateNewPassword.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setNewPasswordTC} from \"../../../i1-main/m2-bll/recovery-reducer\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {Button, Form, Input} from \"antd\";\r\n\r\ntype InfoType = {\r\n    isDone: boolean\r\n    recoveryInfo: string\r\n    setNewPasswordInfo: string\r\n    isNewPasswordSet: boolean\r\n}\r\ntype ParamTypes = {\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport const CreateNewPassword = () => {\r\n    // //декоративная информация для показа что все ок\r\n    const info = useSelector<AppRootStateType, InfoType>( state => state.recovery)\r\n    const dispatch = useDispatch()\r\n    const [password, setPassword] = useState('')\r\n    //зануление свойство isDone для поподания обратно на страницу восстановления пароля\r\n    // dispatch(successful(false))\r\n\r\n    const {resetPasswordToken} = useParams<ParamTypes>()\r\n    console.log(resetPasswordToken)\r\n\r\n    // const changePassword = () => {\r\n    //     console.log('you are inside changePassword fn')\r\n    //     dispatch(setNewPasswordTC({password, resetPasswordToken}))\r\n    //     console.log('inside the function',resetPasswordToken)\r\n    // }\r\n    // const createPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //     setPassword(e.currentTarget.value)\r\n    // }\r\n    type ValuesType = {\r\n        password: string\r\n    }\r\n    const onFinish = (values: ValuesType) => {\r\n        dispatch(setNewPasswordTC({password: values.password,resetPasswordToken}))\r\n    };\r\n    if (info.isNewPasswordSet) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.createNewPassword}>\r\n            <Form\r\n                { ...{labelCol: { span: 8 }, wrapperCol: { span: 16 } }}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[{ required: true, message: 'Please input your password!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item {...{wrapperCol: { offset: 8, span: 16 }}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","import React, {FC, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {logoutTC, onLogoutAC} from \"../../../i1-main/m2-bll/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\n\r\nexport const Logout: FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(onLogoutAC())\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import {\r\n    cardsAPI,\r\n    OnCardAddType,\r\n    RespondCardsType,\r\n    RespondCardType,\r\n    UpdatedRespondCardType,\r\n} from \"../../../i1-main/m3-dal/api\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {message} from \"antd\";\r\nimport {packsLoaderAC} from \"../t1-Packs/packs-reducer\";\r\n\r\nconst initialState = {\r\n    cards: [] as Array<RespondCardType>,\r\n    cardsTotalCount: 20,\r\n    maxGrade: Infinity,\r\n    minGrade: Infinity,\r\n    page: 1,\r\n    pageCount: 1,\r\n    packUserId: '',\r\n    cardsPack_id: '',\r\n    isLoading: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n//AC type\r\ntype CARDS = ReturnType<typeof cardsAC>\r\ntype CURRENT_PACK = ReturnType<typeof currentPackIdAC>\r\ntype UPDATED_CARD = ReturnType<typeof updatedCardAC>\r\ntype LOADER = ReturnType<typeof cardsLoaderAC>\r\n\r\ntype ActionsType = CARDS | CURRENT_PACK | UPDATED_CARD | LOADER\r\n//TC type\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case getCards:\r\n            return {...state, cards: action.data}\r\n        case cardsPack_id:\r\n            return {...state, cardsPack_id: action.value}\r\n        case cardsLoaderIsOn:\r\n            return {...state, isLoading: action.isLoading}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//const\r\nconst getCards = 'getCards'\r\nconst cardsPack_id = 'cardsPack_id'\r\nconst updatedCard = 'updatedCard'\r\nconst cardsLoaderIsOn = 'cardsLoaderIsOn'\r\n\r\n\r\n\r\n//ac\r\nexport const cardsAC = (data: Array<RespondCardType>) => ({ type: getCards, data } as const )\r\nexport const currentPackIdAC = (value: string) => ({ type: cardsPack_id, value } as const )\r\nexport const updatedCardAC = (data: Array<UpdatedRespondCardType>) => ({ type: updatedCard, data } as const )\r\nexport const cardsLoaderAC = (isLoading: boolean) => ({ type: cardsLoaderIsOn, isLoading} as const)\r\n\r\n//tc\r\nexport const getCardsTC = (data: string):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    dispatch(cardsLoaderAC(true))\r\n    cardsAPI.cards(data)\r\n        .then((res: AxiosResponse<RespondCardsType>) => {\r\n            dispatch(cardsAC(res.data.cards))\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error,2 )\r\n        })\r\n        .finally(() => {\r\n            dispatch(cardsLoaderAC(false))\r\n        })\r\n}\r\nexport const addCardTC = (data: {}):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    dispatch(cardsLoaderAC(true))\r\n    cardsAPI.cardAdd(data)\r\n        .then((res: AxiosResponse<OnCardAddType>) => {\r\n            dispatch(getCardsTC(res.data.newCard.cardsPack_id));\r\n            message.info(`New card has been created`)\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error,2)\r\n        })\r\n        .finally(() => {\r\n            dispatch(cardsLoaderAC(false))\r\n        })\r\n}\r\nexport const deleteCardTC = (data: string):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    dispatch(cardsLoaderAC(true))\r\n    cardsAPI.cardDelete(data)\r\n        .then((res: AxiosResponse<any>) => {\r\n            dispatch(getCardsTC(res.data.deletedCard.cardsPack_id));\r\n            message.info(`Picked card has been deleted`)\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error, 2)\r\n        })\r\n        .finally(() => {\r\n            dispatch(cardsLoaderAC(false))\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {RespondCardType} from \"../../../i1-main/m3-dal/api\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Button, Input, Layout, message, Modal, Popconfirm, Space, Spin, Table} from \"antd\";\r\nimport {Content} from \"antd/es/layout/layout\";\r\nimport {addCardTC, currentPackIdAC, deleteCardTC, getCardsTC} from \"./cards-reducer\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {ColumnsType} from \"antd/es/table\";\r\n\r\ninterface User {\r\n    question: string\r\n    answer: string\r\n    grade: number\r\n    lastUpdate: string\r\n    key: string\r\n}\r\n\r\n\r\nexport const Cards = () => {\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [question, setQuestion] = useState(\"\")\r\n    const [answer, setAnswer] = useState(\"\")\r\n\r\n    const state = useSelector<AppRootStateType, Array<RespondCardType>>(s => s.cards.cards)\r\n    const cardsPack_id = useSelector<AppRootStateType, string>(s => s.cards.cardsPack_id)\r\n    const isLoading = useSelector<AppRootStateType, boolean>(s => s.cards.isLoading)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleSetQuestion = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setQuestion(event.currentTarget.value)\r\n    }\r\n    const handleSetAnswer = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setAnswer(event.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (cardsPack_id) {\r\n        dispatch(getCardsTC(cardsPack_id))\r\n        }\r\n    }, [dispatch, cardsPack_id])\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        if (question) {\r\n            if (answer) {\r\n                setIsModalVisible(false);\r\n                dispatch(addCardTC({cardsPack_id, question: `${question.trim()}?`, answer, }))\r\n                setQuestion('')\r\n                setAnswer('')\r\n            } else {\r\n                message.warn(`Answer must contain at least one regular character`)\r\n            }\r\n        } else {\r\n            message.warn(`Question must contain at least one regular character`)\r\n        }\r\n\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    if (cardsPack_id === '') {\r\n        return <Redirect to={PATH.PACKS}/>\r\n    }\r\n\r\n\r\n    const columns: ColumnsType<User> = [\r\n        {\r\n            title: 'Question',\r\n            dataIndex: 'question',\r\n            key: 'question',\r\n            width: '300px',\r\n            render: (text: string) => {\r\n                return <div>{text}</div>\r\n            }\r\n        },\r\n        {\r\n            title: 'Answer',\r\n            dataIndex: 'answer',\r\n            key: 'answer',\r\n            width: '300px',\r\n            render: (text: string) => <div>{text}</div>\r\n        },\r\n        //Оценка колоды\r\n        {\r\n            title: 'Grade',\r\n            dataIndex: 'grade',\r\n            key: 'grade',\r\n            width: '100px',\r\n            sorter: {\r\n                compare: (a: any, b: any) => a.grade - b.grade,\r\n                multiple: 2\r\n            },\r\n            render: (grade: React.ReactNode) => (\r\n                <Space size=\"middle\">\r\n                    <div>{grade}</div>\r\n                </Space>\r\n            ),\r\n        },\r\n        //посл. обновлен.\r\n        {\r\n            title: 'Last Update',\r\n            dataIndex: 'lastUpdate',\r\n            key: 'lastUpdate',\r\n            width: '200px',\r\n        },\r\n        //actions\r\n        {\r\n            title: 'Actions',\r\n            key: 'actions',\r\n            render: (_: any, record: { key: React.Key }) => (\r\n                <Space size=\"middle\">\r\n                    <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\r\n                        <a>Delete</a>\r\n                    </Popconfirm>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const handleDelete = (key: React.Key) => {\r\n        const packId = key.toString()\r\n        dispatch(deleteCardTC(packId))\r\n        dispatch(currentPackIdAC(packId))\r\n    };\r\n    const data: User[] = state.map((pack) => ({\r\n        question: pack.question,\r\n        answer: pack.answer,\r\n        grade: pack.grade,\r\n        lastUpdate: pack.updated.substr(0, 10).replace(/-/g, \" \"),\r\n        key: pack._id,\r\n    }))\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Spin spinning={isLoading}>\r\n            <Layout>\r\n                <Button onClick={showModal}>Add Card</Button>\r\n                <Modal title=\"Add Card\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                    <span>Question: </span><Input value={question} onChange={handleSetQuestion}/>\r\n                    <span>Answer: </span><Input value={answer} onChange={handleSetAnswer}/>\r\n                </Modal>\r\n                <Content>\r\n                    <Table\r\n                        dataSource={data}\r\n                        columns={columns}\r\n                        // bordered\r\n                        pagination={{\r\n                            position: ['topRight'],\r\n                            defaultPageSize: 10,\r\n                            pageSizeOptions: ['3', '5', '10', '20', '25']\r\n                        }}\r\n\r\n                    />\r\n                </Content>\r\n            </Layout>\r\n            </Spin>\r\n        </>\r\n    )\r\n}","import {\r\n    CardPacksType,\r\n    cardsAPI,\r\n    PacksResponseType,\r\n    RequestPackType\r\n} from \"../../../i1-main/m3-dal/api\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport {message} from \"antd\";\r\n\r\nconst initialState = {\r\n    cardPacks: [] as Array<CardPacksType>,\r\n    cardsPack_id: '',\r\n    cardPacksTotalCount: 14,\r\n    maxCardsCount: 4,\r\n    minCardsCount: 0,\r\n    page: 1,\r\n    pageCount: 4,\r\n    isLoading: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype CARD_PACKS = ReturnType<typeof cardPacksAC>\r\ntype CURRENT_PACK = ReturnType<typeof currentPackIdAC>\r\ntype LOADER = ReturnType<typeof packsLoaderAC>\r\n\r\ntype ActionsType = CARD_PACKS | CURRENT_PACK | LOADER\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\n\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case getCardPacks:\r\n            return {...state, cardPacks: action.data}\r\n        case cardsPack_id:\r\n            return {...state, cardsPack_id: action.value}\r\n        case packsLoaderIsOn:\r\n            return {...state, isLoading: action.isLoading}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getCardPacks = 'getCardPacks'\r\nconst cardsPack_id = 'cardsPack_id'\r\nconst packsLoaderIsOn = 'packsLoaderIsOn'\r\n\r\n\r\n//ac\r\nexport const cardPacksAC = (data: Array<CardPacksType>) => ({ type: getCardPacks, data } as const )\r\nexport const currentPackIdAC = (value: string) => ({ type: cardsPack_id, value } as const )\r\nexport const packsLoaderAC = (isLoading: boolean) => ({ type: packsLoaderIsOn, isLoading} as const)\r\n\r\n//tc\r\nexport const getPacksTC = ():ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    dispatch(packsLoaderAC(true))\r\n    cardsAPI.packs()\r\n        .then((res:AxiosResponse<PacksResponseType>) => {\r\n            dispatch(cardPacksAC(res.data.cardPacks))\r\n        })\r\n        .catch((err) => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error,2)\r\n        })\r\n        .finally(() => {\r\n            dispatch(packsLoaderAC(false))\r\n        })\r\n}\r\n\r\nexport const addPackTC = (data: RequestPackType):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    dispatch(packsLoaderAC(true))\r\n    cardsAPI.packsAdd(data)\r\n        .then((res: AxiosResponse) => {\r\n            dispatch(getPacksTC())\r\n            message.info(`New pack ${res.data.newCardsPack.name} has been added`)\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error,2)\r\n        })\r\n        .finally(() => {\r\n            dispatch(packsLoaderAC(false))\r\n        })\r\n}\r\nexport const updatePack = (data: {_id: string, name: string}):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    dispatch(packsLoaderAC(true))\r\n    cardsAPI.packUpdate(data)\r\n        .then( res => {\r\n            dispatch(getPacksTC());\r\n            message.info(`Pack name has been updated to ${res.data.updatedCardsPack.name}`)\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error,2)\r\n        })\r\n        .finally(() => {\r\n            dispatch(packsLoaderAC(false))\r\n        })\r\n}\r\nexport const deletePackTC = (id?: string):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    dispatch(packsLoaderAC(true))\r\n    cardsAPI.packDelete(id)\r\n        .then( res => {\r\n            dispatch(getPacksTC())\r\n            message.info(`Pack ${res.data.deletedCardsPack.name} has been deleted`)\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error,2)\r\n        })\r\n        .finally(() => {\r\n            dispatch(packsLoaderAC(false))\r\n        })\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Button, Input, Layout, Modal, Popconfirm, Space, Spin, Table} from \"antd\";\r\nimport 'antd/dist/antd.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Content} from \"antd/es/layout/layout\";\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {ColumnsType} from \"antd/es/table\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {CardPacksType} from \"../../../i1-main/m3-dal/api\";\r\nimport {addPackTC, currentPackIdAC, deletePackTC, getPacksTC, updatePack} from \"./packs-reducer\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {message} from \"antd/es\";\r\n\r\n\r\ninterface User {\r\n    name: string\r\n    cardsCount: number\r\n    creator: string\r\n    lastUpdate: string\r\n    key: string\r\n}\r\n\r\nexport const Packs = () => {\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [packName, setPackName] = useState(\"\")\r\n    const [first, setFirst] = useState<boolean>(true);\r\n\r\n    const [updateModalVisible, setUpdateModalVisible] = useState(false)\r\n    const [updatePackName, setUpdatePackName] = useState(\"\")\r\n\r\n\r\n    // const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n\r\n\r\n    const state = useSelector<AppRootStateType, Array<CardPacksType>>(s => s.packs.cardPacks)\r\n    const currentId = useSelector<AppRootStateType, string>(s => s.packs.cardsPack_id)\r\n    const isLoading = useSelector<AppRootStateType, boolean>(s => s.packs.isLoading)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (first) {\r\n            dispatch(getPacksTC())\r\n            setFirst(false)\r\n        }\r\n    }, [dispatch, first])\r\n    ////\r\n    const onOk = () => {\r\n        if (updatePackName) {\r\n        setUpdateModalVisible(false);\r\n        dispatch(updatePack({_id: currentId, name: updatePackName}))\r\n        setUpdatePackName('')\r\n        } else {\r\n            message.error(`Puck name must contain at least one regular character`)\r\n        }\r\n    };\r\n    const onCancel = () => {\r\n        setUpdateModalVisible(false);\r\n        setUpdatePackName('')\r\n    };\r\n    const onUpdateName = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setUpdatePackName(event.currentTarget.value)\r\n    }\r\n\r\n    const modalCallBack = () => {\r\n        setUpdateModalVisible(true)\r\n    }\r\n\r\n    ////\r\n\r\n\r\n    //addPack {\r\n    //добовление имя колоды в useState\r\n    const handleSetName = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPackName(event.currentTarget.value)\r\n\r\n    }\r\n\r\n    //Показать модальное окно\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    // При нажатии в модальном окне кнопки ок\r\n    const handleOk = () => {\r\n        if (packName) {\r\n            setIsModalVisible(false);\r\n            dispatch(addPackTC({name: packName}))\r\n            setPackName('')\r\n        }   else {\r\n            message.error(`Puck name must contain at least one regular character`)\r\n        }\r\n\r\n\r\n\r\n    };\r\n    // закрытие модалки по кнопке cancel или X\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n        setPackName('')\r\n    };\r\n    // забирается id колоды\r\n    const myCallBack = (id: string) => {\r\n        dispatch(currentPackIdAC(id))\r\n    }\r\n    // }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    const columns: ColumnsType<User> = [\r\n        //Название Колоды\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            width: '250px',\r\n            render: (value: React.ReactNode) => {\r\n                return <div>\r\n                    <NavLink to={PATH.CARDS}>{value}</NavLink>\r\n                </div>;\r\n            },\r\n        },\r\n        //Создатель колоды\r\n        {\r\n            title: 'Creator',\r\n            dataIndex: 'creator',\r\n            key: 'creator',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.grade - b.grade,\r\n            //     multiple: 2\r\n            // },\r\n            width: '100',\r\n            render: (creator: React.ReactNode) => (\r\n                <Space size=\"middle\">\r\n                    <div>{creator}</div>\r\n                </Space>\r\n            ),\r\n        },\r\n        //колиество карт в колоде\r\n        {\r\n            title: 'Cards Count',\r\n            dataIndex: 'cardsCount',\r\n            key: 'cardsCount',\r\n            width: '200',\r\n            sorter: {\r\n                compare: (a, b) => a.cardsCount - b.cardsCount,\r\n                multiple: 1\r\n            },\r\n        },\r\n        //посл. обновлен.\r\n        {\r\n            title: 'Last Update',\r\n            dataIndex: 'lastUpdate',\r\n            key: 'lastUpdate',\r\n        },\r\n        //actions\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (s, record: { key: React.Key }) => (\r\n                <div>\r\n                    <Space size={'middle'}>\r\n                        <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\r\n                            <a>Delete</a>\r\n                        </Popconfirm>\r\n                        <NavLink to={PATH.LEARN}>Learn</NavLink>\r\n                        <a rel=\"stylesheet\" onClick={() => {\r\n                            modalCallBack()\r\n                        }}>Update</a>\r\n                    </Space>\r\n\r\n                </div>\r\n\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const handleDelete = (key: React.Key) => {\r\n        const packId = key.toString()\r\n        dispatch(deletePackTC(packId))\r\n        dispatch(currentPackIdAC(packId))\r\n    };\r\n\r\n\r\n    const data: User[] = state.map((pack) => ({\r\n        name: pack.name,\r\n        cardsCount: pack.cardsCount,\r\n        lastUpdate: pack.updated.substr(0, 10).replace(/-/g, \" \"),\r\n        creator: pack.user_name,\r\n        key: pack._id\r\n    }))\r\n\r\n    return (\r\n        <>\r\n            <Spin spinning={isLoading}>\r\n                <Layout>\r\n\r\n                    <Button onClick={showModal}>Add Pack</Button>\r\n                    <Modal title=\"Add Pack\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                        <span>Pack name: </span><Input onChange={handleSetName} value={packName}/>\r\n                    </Modal>\r\n                    <Modal title=\"Update pack name\" visible={updateModalVisible} onOk={onOk} onCancel={onCancel}>\r\n                        <span>Update pack name: </span><Input onChange={onUpdateName} value={updatePackName}/>\r\n                    </Modal>\r\n                    <Content>\r\n                        <Table<User>\r\n                            dataSource={data}\r\n                            columns={columns}\r\n                            onRow={(record) => {\r\n                                return {\r\n                                    onClick: () => {\r\n                                        myCallBack(record.key)\r\n                                    }, // click row\r\n                                };\r\n                            }}\r\n                            // bordered\r\n                            pagination={{\r\n                                position: ['topRight'],\r\n                                defaultPageSize: 10,\r\n                                pageSizeOptions: ['3', '5', '10', '20', '25']\r\n                            }}\r\n                        />\r\n                    </Content>\r\n                </Layout>\r\n            </Spin>\r\n        </>\r\n    )\r\n}","import {cardsAPI, LearnCardType, ThunkLearnPutType} from \"../../../i1-main/m3-dal/api\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {message} from \"antd\";\r\n\r\n\r\nconst initialState = {\r\n    card_id: '',\r\n    cardsPack_id: '',\r\n    created: '',\r\n    grade: 0,\r\n    more_id: '',\r\n    shots: 0,\r\n    updated: '',\r\n    user_id: '',\r\n    __v: 0,\r\n    _id: '',\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n//AC type\r\n\r\ntype CARD = ReturnType<typeof updateCardAC>\r\ntype ActionsType = CARD\r\n//TC type\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\n\r\nexport const learnReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case updatedCard:\r\n            return {\r\n                ...state,\r\n                card_id: action.data.card_id,\r\n                cardsPack_id: action.data.cardsPack_id,\r\n                created: action.data.created,\r\n                grade: action.data.grade,\r\n                more_id: action.data.more_id,\r\n                shots: action.data.shots,\r\n                updated: action.data.updated,\r\n                user_id: action.data.user_id,\r\n                __v: action.data.__v,\r\n                _id: action.data._id,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//const\r\nconst updatedCard = 'updatedCard'\r\n\r\n\r\n\r\n//ac\r\nexport const updateCardAC = (data: LearnCardType) => ({ type: updatedCard, data } as const )\r\n\r\n//tc\r\nexport const cardsEvaluation = (data: ThunkLearnPutType):ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    cardsAPI.evaluationCard(data)\r\n        .then((res:AxiosResponse<LearnCardType>) => {\r\n            dispatch(updateCardAC(res.data))\r\n        })\r\n        .catch((err) => {\r\n            const error = err.response\r\n                ? err.response.data.error : (err.message + ', more details in the console');\r\n            message.error(error, 2)\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../i1-main/m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Button, Divider, Layout, message} from \"antd\";\r\nimport {Content} from \"antd/es/layout/layout\";\r\nimport {PATH} from \"../../../i1-main/m1-ui/u3-routes/Routes\";\r\nimport {getCardsTC} from \"../t2-Cards/cards-reducer\";\r\nimport 'antd/dist/antd.css';\r\nimport s from './Learn.module.css'\r\nimport {cardsEvaluation} from \"./learn-reducer\";\r\n\r\nexport type CardType = {\r\n    _id: string;\r\n    cardsPack_id: string;\r\n\r\n    answer: string;\r\n    question: string;\r\n    grade: number;\r\n    shots: number;\r\n\r\n    type: string;\r\n    rating: number;\r\n    // more_id: string;\r\n\r\n    created: string;\r\n    updated: string;\r\n}\r\n\r\nconst messages = [\r\n    'Не переживай ты всё равно красавчик',\r\n    'Да ты всё и так знаешь, просто гонишь',\r\n    'Ну ты красавчик',\r\n    'Самурай, лети на собес!',\r\n    'Ты стопудовый мидл не меньше!'\r\n]\r\n\r\n\r\nconst getCard = (cards: Array<CardType>) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n    return cards[res.id + 1];\r\n}\r\n\r\n\r\nexport const Learn = () => {\r\n    const {cards} = useSelector((store: AppRootStateType) => store.cards);\r\n    const cardsPack_id = useSelector<AppRootStateType, string>(s => s.cards.cardsPack_id)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const [first, setFirst] = useState<boolean>(true);\r\n    const [check, setCheck] = useState(false)\r\n    const [isDisable, setIsDisable] = useState(true)\r\n    const [isDisabledButton, setIsDisabledButton] = useState(false)\r\n\r\n    const [card, setCard] = useState<CardType>({\r\n        _id: 'fake',\r\n        cardsPack_id: '',\r\n\r\n        answer: '',\r\n        question: '',\r\n        grade: 0,\r\n        shots: 0,\r\n\r\n        type: '',\r\n        rating: 0,\r\n        // more_id: '',\r\n\r\n        created: '',\r\n        updated: '',\r\n    });\r\n\r\n    const myCallBack = useCallback((grade: number, card_id: string) => {\r\n        message.info(messages[grade - 1], 2)\r\n        dispatch(cardsEvaluation({grade, card_id}))\r\n        setIsDisable(false)\r\n        setIsDisabledButton(true)\r\n\r\n    }, [setIsDisable, dispatch])\r\n\r\n    const checkButton = useCallback((check: boolean) => {\r\n        setCheck(check)\r\n        if (cards.length > 0 && !check) {\r\n            setCard(getCard(cards));\r\n        }\r\n        setIsDisabledButton(false)\r\n    }, [setCheck, cards])\r\n\r\n    useEffect(() => {\r\n        if (first) {\r\n            dispatch(getCardsTC(cardsPack_id))\r\n            setFirst(false);\r\n        }\r\n\r\n        if (cards.length > 0) setCard(getCard(cards));\r\n        return () => {\r\n            // console.log('LearnContainer useEffect off');\r\n        }\r\n    }, [dispatch, cards, first, cardsPack_id])\r\n\r\n    if (cardsPack_id === '') {\r\n        return <Redirect to={PATH.PACKS}/>\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <> {card &&\r\n        <Layout className={s.layout}>\r\n            <Content className={s.content}>\r\n                <div>\r\n                    <div className={s.question}>\r\n                        <div className={s.question}>{card.question}</div>\r\n                        <Button onClick={() => checkButton(true) } disabled={isDisabledButton}>CHECK</Button></div>\r\n                    {check &&\r\n                    <div>\r\n                        <Divider/>\r\n                        <div className={s.answer}>{card.answer}</div>\r\n                        <div className={s.buttons}>\r\n                            <div className={s.button}>\r\n                                <Button onClick={() => myCallBack(1, card._id)} disabled={isDisabledButton}>I do not know it</Button>\r\n                            </div>\r\n                            <div className={s.button}>\r\n                                <Button onClick={() => myCallBack(2, card._id)} disabled={isDisabledButton}>I am not sure</Button>\r\n                            </div>\r\n                            <div className={s.button}>\r\n                                <Button onClick={() => myCallBack(3, card._id)} disabled={isDisabledButton}>I feel I knew it</Button>\r\n                            </div>\r\n                            <div className={s.button}>\r\n                                <Button onClick={() => myCallBack(4, card._id)} disabled={isDisabledButton}>I know it</Button>\r\n                            </div>\r\n                            <div className={s.button}>\r\n                                <Button onClick={() => myCallBack(5, card._id)} disabled={isDisabledButton}>I know well</Button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={s.nextButton}>\r\n                            <Button disabled={isDisable} onClick={() => checkButton(false)}>NEXT</Button>\r\n                        </div>\r\n                        <Divider/>\r\n                    </div>\r\n                    }\r\n                </div>\r\n            </Content>\r\n        </Layout>\r\n        }\r\n        </>\r\n    )\r\n}","import {PATH} from \"../u3-routes/Routes\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport React, {DetailedHTMLProps, HTMLAttributes, useEffect, useState} from \"react\";\r\nimport {authMe} from \"../../m2-bll/auth-reducer\";\r\nimport {Spin} from \"antd\";\r\n\r\ntype DivPropsType = DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\r\n\r\ntype AuthRedirectPagePropsType = DivPropsType & {}\r\n\r\nconst AuthRedirectPage: React.FC<AuthRedirectPagePropsType> = React.memo((\r\n    {\r\n        children,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const user = useSelector((store: AppRootStateType) => store.profile);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.isLoggedIn.isLoggedIn)\r\n    const [firstRendering, setFirstRendering] = useState<boolean>(true);\r\n    const [redirect, setRedirect] = useState<boolean>(false);\r\n    const [spin, setSpin] = useState<boolean>(user._id === \"\"); // !!! add request /auth/me\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (firstRendering) {\r\n            // if (isLoggedIn) console.log(\"Error\");\r\n            if (user._id === \"\") {\r\n                dispatch(authMe());\r\n            }\r\n            setFirstRendering(false); // + rerender\r\n        } else {\r\n            if (!redirect && ((spin) || (!spin && user._id === \"\"))) {\r\n                setTimeout(() => setRedirect(true), 1500);\r\n            }\r\n            if (isLoggedIn && spin) setSpin(false);\r\n        }\r\n    }, [firstRendering, setFirstRendering, user._id, setRedirect, isLoggedIn,\r\n        dispatch, redirect, spin, setSpin]);\r\n\r\n    if (redirect) return <Redirect to={PATH.LOGIN}/>;\r\n    if (spin) return <Spin spinning={true}/>;\r\n\r\n    return (\r\n        <>\r\n            {/*<Log s={renderLog || \"rendering AuthRedirectPage\"}/>*/}\r\n            <div {...restProps}>\r\n                {children}\r\n            </div>\r\n        </>\r\n    );\r\n});\r\n\r\nexport default AuthRedirectPage;","import React from \"react\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport Error404 from \"../u4-components/co2-Error404/Error404\";\r\nimport {Login} from \"../../../i2-features/f1-Auth/f1-Login/Login\";\r\nimport {Registration} from \"../../../i2-features/f1-Auth/f3-Registration/Registration\";\r\nimport {Profile} from \"../u4-components/co1-Profile/Profile\";\r\nimport {Recovery} from \"../../../i2-features/f1-Auth/f2-Recovery/Recovery\";\r\nimport {CreateNewPassword} from \"../../../i2-features/f1-Auth/f2-Recovery/CreateNewPassword\";\r\nimport {Logout} from \"../../../i2-features/f1-Auth/f1-Login/Logout\";\r\nimport {Cards} from \"../../../i2-features/f2-Table/t2-Cards/Cards\";\r\nimport {Packs} from \"../../../i2-features/f2-Table/t1-Packs/Packs\";\r\nimport {Learn} from \"../../../i2-features/f2-Table/t3-Learn/Learn\";\r\nimport AuthRedirectPage from \"../u1-redirect/RedirectComponent\";\r\n\r\n\r\nexport const PATH = {\r\n    LOGIN: \"/login\",\r\n    REGISTRATION: '/registration',\r\n    PROFILE: '/profile',\r\n    RECOVERY: '/recovery',\r\n    CREATE_NEW_PASSWORD: '/create_new_password',\r\n    LOGOUT: '/logout',\r\n    PACKS: '/packs',\r\n    CARDS: '/cards',\r\n    LEARN: '/learn'\r\n\r\n\r\n\r\n    // add paths\r\n}\r\n\r\nfunction Routes() {\r\n    return (\r\n        <div>\r\n            {/*Switch выбирает первый подходящий роут*/}\r\n            <Switch>\r\n                 {/*в начале мы попадаем  на страницу \"/\" и переходим сразу на страницу PRE_JUNIOR*/}\r\n                {/*exact нужен чтоб указать полное совподение (что после \"/\" ничего не будет)*/}\r\n                {/*<Route path={\"/\"} exact render={() => <Redirect to={PATH.PROFILE}/>}/>*/}\r\n                <Route path={\"/\"} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.REGISTRATION} render={() => <Registration/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <AuthRedirectPage> <Profile/> </AuthRedirectPage>}/>\r\n                {/*<Route path={PATH.RECOVERY} render={() => <Recovery/>}/>*/}\r\n                <Route path={`${PATH.CREATE_NEW_PASSWORD}/:resetPasswordToken`}  render={() => <CreateNewPassword/>}/>\r\n                <Route path={PATH.RECOVERY} exact render={() => <Recovery/>}/>\r\n                <Route path={PATH.LOGOUT} render={() => <Logout/>}/>\r\n                <Route path={PATH.PACKS} render={() =><AuthRedirectPage><Packs/></AuthRedirectPage>}/>\r\n\r\n                <Route path={`${PATH.CARDS}/:packToken`} render={() => <Cards/>}/>\r\n                <Route path={`${PATH.CARDS}`} exact render={() =><AuthRedirectPage> <Cards/> </AuthRedirectPage>}/>\r\n                <Route path={`${PATH.LEARN}`} exact render={() =><AuthRedirectPage> <Learn/> </AuthRedirectPage>}/>\r\n\r\n\r\n\r\n                <Route path={'/404'} render={() => <Error404/>}/>\r\n                <Redirect from={'*'} to={'/404'}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../u3-routes/Routes\";\r\nimport s from './Header.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\n\r\n\r\nfunction Header() {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(s => s.isLoggedIn.isLoggedIn)\r\n\r\n    return (\r\n        <div className={s.background}>\r\n            {!isLoggedIn ?\r\n                <div className={s.nav_links}>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active} to={PATH.LOGIN}>Login</NavLink>\r\n                    </div>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active}\r\n                                 to={PATH.REGISTRATION}>Registration</NavLink>\r\n                    </div>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active} to={PATH.RECOVERY}>Forgot\r\n                            Password?</NavLink>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className={s.nav_links}>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active} to={PATH.PROFILE}>Profile</NavLink>\r\n                    </div>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active} to={PATH.PACKS}>Packs</NavLink>\r\n                    </div>\r\n                    <div className={s.nav_container}>\r\n                        <NavLink className={s.title_nav} activeClassName={s.active} to={PATH.LOGOUT}>Logout</NavLink>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport Header from \"./u2-header/Header\";\r\nimport Routes from \"./u3-routes/Routes\";\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter >\r\n        <Header/>\r\n        <Routes/>\r\n      </HashRouter>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {recoveryReducer} from \"./recovery-reducer\";\r\nimport thunk from 'redux-thunk';\r\nimport {packsReducer} from \"../../i2-features/f2-Table/t1-Packs/packs-reducer\";\r\nimport {cardsReducer} from \"../../i2-features/f2-Table/t2-Cards/cards-reducer\";\r\nimport {learnReducer} from \"../../i2-features/f2-Table/t3-Learn/learn-reducer\";\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    isLoggedIn: authReducer,\r\n    profile: profileReducer,\r\n    isRegistered: registrationReducer,\r\n    recovery: recoveryReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    learn: learnReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './i1-main/m1-ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './i1-main/m2-bll/store';\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Header_background__3d8e3\",\"nav_links\":\"Header_nav_links__2fY8Y\",\"nav_container\":\"Header_nav_container__20c2T\",\"title_nav\":\"Header_title_nav__3-n7c\",\"active\":\"Header_active__35kSX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"site-layout-content\":\"Learn_site-layout-content__2BC6M\",\"components-layout-demo-top\":\"Learn_components-layout-demo-top__14vX7\",\"logo\":\"Learn_logo__3Vw2g\",\"ant-row-rtl\":\"Learn_ant-row-rtl__s01-6\",\"content\":\"Learn_content__diOPh\",\"question\":\"Learn_question__1s5sJ\",\"layout\":\"Learn_layout__22IdH\",\"buttons\":\"Learn_buttons__gdf5j\",\"button\":\"Learn_button__zD3xK\",\"nextButton\":\"Learn_nextButton__30IV7\",\"answer\":\"Learn_answer__3HpdM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContainer\":\"Profile_profileContainer__2wMDh\",\"profile\":\"Profile_profile__gZD1V\",\"avatar\":\"Profile_avatar__2fBCZ\",\"info\":\"Profile_info__37oRo\",\"name\":\"Profile_name__3gtJ0\"};"],"sourceRoot":""}